[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Product Bundle",
  "enabled": 1,
  "modified": "2023-11-20 06:34:31.626339",
  "module": "KMS",
  "name": "Create Bundle",
  "script": "frappe.ui.form.on('Product Bundle', {\n\tsetup(frm) {\n\t\tfrm.set_df_property('custom_customer', 'read_only', 1);\n\t\tfrm.set_df_property('description', 'read_only', 1);\n\t\tfrm.set_df_property('new_item_code', 'read_only', 1);\n\t\tfrm.set_query(\"custom_price_list\", ()=>{\n\t\t    return {\n\t\t        filters: {\n\t\t            selling: true\n\t\t        }\n\t\t    }\n\t\t})\n\t\t/*Child Table filter*/\n\t\tfrm.set_query(\"item_code\", \"items\", () =>{\n\t\t    return {\n\t\t        filters: {\n\t\t            custom_product_bundle: true,\n\t\t            is_sales_item: true,\n\t\t            is_stock_item: false\n\t\t        }\n\t\t    };\n\t\t});\n\t},\n\t/*BUTTON CREATE*/\n\tcustom_create(frm) {\n        frappe.prompt([\n            {\n                label: 'Bundle Name',\n                fieldname: 'bundle_name',\n                fieldtype: 'Data',\n                reqd: true\n            },\n            {\n                label: 'Customer',\n                fieldname: 'customer',\n                fieldtype: 'Link',\n                reqd: true,\n                options:\"Customer\",\n                get_query: () => {\n                    return {\n                        filters: {\"customer_type\": \"Company\"}\n                    };\n                }\n            },\n            {\n                label: \"Price List\",\n                fieldname: \"price_list\",\n                fieldtype: \"Link\",\n                reqd: true,\n                options: \"Price List\",\n                get_query: () => {\n                    return {\n                        filters: {selling: true}\n                    };\n                }\n            },\n            {\n                label: \"Medical Check Up\",\n                fieldname: \"is_mcu\",\n                fieldtype: \"Check\"\n            },\n\t        {\n\t            label: \"From Service Package\",\n\t            fieldname: \"copy_from\",\n\t            fieldtype: \"Link\",\n\t            options: \"Product Bundle\",\n\t            get_query: () => {\n\t                return {\n\t                    filters: {custom_enable: true}\n\t                };\n\t            }\n\t        }\n        ], (values) => {\n            /*AUTOMATICALLY CREATE ITEM*/\n            frappe.db.insert({\n                doctype: \"Item\",\n                item_name: values.bundle_name,\n                item_group: \"Exam Course\",\n                stock_uom: \"Unit\",\n                is_stock_item: false,\n                include_item_in_manufacturing: false,\n                is_purchase_item: false,\n                is_sales_item: true,\n                custom_product_bundle_customer: values.customer\n            }). then(doc=>{\n                /*SET PARENT VALUES*/\n                frm.set_value({\n                    new_item_code: doc.name,\n                    description: doc.item_name,\n                    custom_customer: values.customer,\n                    custom_price_list: values.price_list\n                });\n                /*SET MANDATORY ITEMS IF MCU*/\n                if (!values.copy_from) {\n                    if(values.is_mcu){\n                        /*fetch only mandatory item*/\n                        frappe.call({\n                            method: \"kms.api.get_mcu\",\n                            args: {price_list: values.price_list}\n                        }).then((r)=>{\n                            frm.doc.items = [];\n                            let total = 0;\n                            $.each(r.message, function(_i, e){\n                                let item = frm.add_child(\"items\");\n            \t                item.item_code = e.item_code;\n            \t                item.qty = 1;\n            \t                item.description = e.item_name;\n            \t                item.rate = e.price_list_rate;\n            \t                total += e.price_list_rate;\n            \t                frm.set_value(\"custom_rate\", total);\n                                frm.refresh_field(\"custom_rate\");\n                            });\n                            refresh_field(\"items\");\n                        });\n                    }\n                } else {\n                    /*fetch from other product bundle*/\n        \t        frappe.db.get_doc(\"Product Bundle\", values.copy_from).then(doc=>{\n        \t            frm.doc.items =[];\n        \t            let total = 0;\n        \t            $.each(doc.items, function(_i, e){\n        \t                let item = frm.add_child(\"items\");\n        \t                item.item_code = e.item_code;\n        \t                item.qty = e.qty;\n        \t                item.description = e.description;\n        \t                item.rate = e.rate;\n        \t                total += e.rate;\n        \t                frm.set_value(\"custom_rate\", total);\n        \t            });\n        \t            refresh_field(\"custom_rate\");\n        \t            refresh_field(\"items\");\n        \t        });\n                }\n            });\n        });\n\t},\n\tafter_save(frm) {\n        let filters = {};\n        filters.item_code = frm.doc.new_item_code;\n        filters.price_list = frm.doc.custom_price_list;\n        filters.customer = frm.doc.custom_customer;\n        filters.price_list_rate = frm.doc.custom_rate;\n        frappe.call({\n            method:'kms.api.upsert_item_price',\n            args: {\n                item_code: frm.doc.new_item_code, \n                price_list: frm.doc.custom_price_list,\n                customer: frm.doc.custom_customer,\n                price_list_rate: frm.doc.custom_rate\n            }\n        }).then((r)=>{\n            console.log(r);\n        });\n\t}\n});\n\nfrappe.ui.form.on('Product Bundle Item', {\n\titem_code(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    frappe.model.set_value(d.doctype, d.name, \"qty\", 1);\n\t    frappe.db.get_doc(\n\t        'Item Price',\n\t        null,\n\t        {\n\t            item_code: d.item_code,\n\t            selling: true,\n\t            price_list: frm.doc.custom_price_list\n\t        }).then(r=>{\n\t            frappe.model.set_value(d.doctype, d.name, 'rate', r.price_list_rate);\n\t        });\n\t    frm.refresh_field(\"items\");\n\t},\n\trate(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n\titems_add(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n\titems_remove(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-05-28 09:12:53.144950",
  "module": "KMS",
  "name": "Quotation Item Filter",
  "script": "frappe.ui.form.on('Quotation', {\n    quotation_to(frm) {\n        frm.doc.party_name = '';\n        if(frm.doc.quotation_to === 'Customer'){\n            frm.set_query('party_name', () => {\n                return {\n                    filters: {customer_type: 'Company'}\n                };\n            });\n        }\n    },\n    setup(frm) {\n        if(frm.doc.__islocal){\n            frm.doc.items = [];\n            frm.set_df_property('items', 'hidden', 1);\n        } else {\n            //frm.doc.items = [];\n            frm.set_df_property('items', 'hidden', 0);\n        }\n    },\n\trefresh(frm) {\n\t    frm.trigger('create_package_items_tab');\n\n\t    frm.set_query(\"item_code\", \"items\", function(doc, cdt, cdn){\n\t        let d = locals[cdt][cdn];\n\t        return {\n\t            filters: {\n\t                is_sales_item : true,\n\t                disabled: false,\n\t                is_purchase_item: false\n\t            }\n\t        };\n\t    });\n\t    \n\t    /*if(frm.doc.docstatus===0 && frm.doc.quotation_to === 'Customer'){\n\t        if(frm.doc.party_name){\n        \t    ////Custom button to get available product bundle within a Customer before save\n    \t        frm.add_custom_button(\n    \t            __('Product Bundle'),\n    \t            () => {\n    \t                frappe.db.get_list(\n    \t                    'Product Bundle',\n    \t                    {\n    \t                        fields: ['new_item_code', 'description', 'custom_rate'],\n    \t                        filters: {\n    \t                            custom_customer: frm.doc.party_name,\n    \t                            disabled: false\n    \t                        }\n    \t                    }). then(records => {\n    \t                        frm.doc.items =[];\n    \t                        $.each(records, (_i, e)=>{\n    \t                            let item = frm.add_child(\"items\");\n    \t                            item.item_code = e.new_item_code;\n    \t                            item.item_name = e.description;\n    \t                            item.description = e.description;\n    \t                            item.qty = 1;\n    \t                            item.uom = 'Unit';\n    \t                            item.rate = e.custom_rate;\n    \t                        });\n    \t                        refresh_field(\"items\");\n    \t                    });\n    \t            },\n    \t            __(\"Get Items From\"), \n    \t            \"btn-default\"\n    \t        );\n\t        } else {\n\t            ////Restrict to company customer only\n\t            frm.set_query('party_name', () => {\n\t                return {\n\t                    filters: {\n\t                        customer_type: 'Company'\n\t                    }\n\t                };\n\t            });\n\t        }\n\t    }*/\n\t    \n        /***Custom button to create product bundle within a Lead before save***/\n        if (frm.doc.docstatus===0 && frm.doc.party_name && (frm.doc.quotation_to === 'Customer' || frm.doc.quotation_to === 'Lead')){\n            frm.add_custom_button(\n                __('New Product Bundle'),\n                () => {\n                    //ambil data item\n                    frappe.call({\n                        method: \"kms.api.get_items_to_create_bundle\"\n                    }).then((r)=>{\n                        console.log(JSON.stringify(r.message))\n                        const uniqueLv1 = [...new Set(r.message.map(item=> item.lv1))].join('\\n');\n                        let fields = [\n                            {\n                                fieldname: 'package_name',\n                                fieldtype: 'Data',\n                                label: 'Package Name',\n                                reqd: 1\n                            },\n                            {\n                                fieldname: 'col_1',\n                                fieldtype: 'Column Break'\n                            },\n                            {\n                                fieldname: 'qty',\n                                fieldtype: 'Int',\n                                label: 'Qty',\n                                reqd: 1\n                            },\n                            {\n                                fieldname: 'sb_00',\n                                fieldtype: 'Section Break',\n                                label: 'Copy From',\n                                collapsible: 1\n                            },\n                            {\n                                fieldtype: 'Link',\n                                fieldname: 'copy_from',\n                                label: 'Copy from Package',\n                                options: 'Product Bundle'\n                            },\n                            {\n                                fieldname: 'sb_3',\n                                fieldtype: 'Section Break',\n                                label: 'Selected Examination Items',\n                                hidden: 0\n                            },\n                            {\n                                fieldname: 'html_1',\n                                fieldtype: 'HTML',\n                                label: 'Selected Examinations'\n                            },\n                            {\n                                fieldname: 'sb_1',\n                                fieldtype: 'Section Break',\n                                label: 'Examination Type'\n                            },\n                            {\n                                fieldname: 'select_1',\n                                fieldtype: 'Select',\n                                options: uniqueLv1,\n                            },\n                            {\n                                fieldname: 'cb_1',\n                                fieldtype: 'Column Break'\n                            },\n                            {\n                                fieldname: 'select_2',\n                                fieldtype: 'Select',\n                                hidden: 1,\n                                options: '',\n                            },\n                            {\n                                fieldname: 'cb_2',\n                                fieldtype: 'Column Break'\n                            },\n                            {\n                                fieldname: 'select_3',\n                                fieldtype: 'Select',\n                                hidden: 1,\n                                options: ''\n                            },\n                            {\n                                fieldname: 'sb_2',\n                                fieldtype: 'Section Break',\n                                label: 'Select Examination Items',\n                                hidden: 0\n                            },\n                            {\n                                fieldname: 'html_0',\n                                fieldtype: 'HTML',\n                                label: 'Selected Examinations'\n                            },\n                        ];\n\n                        // Grouping the data by distinct lv2 and lv3 values\n                        const groupedData = {};\n                        r.message.forEach(item => {\n                            const key = item.lv3 || item.lv2; // Use lv2 if lv3 is empty, otherwise use lv3\n                            if (!groupedData[key]) {\n                                groupedData[key] = [];\n                            }\n                            groupedData[key].push(item);\n                        });\n\n                        // Function to divide an array into n balanced arrays\n                        const divideArray = (arr, n) => {\n                            const result = Array.from({ length: n }, () => []);\n                            arr.forEach((item, index) => {\n                                result[index % n].push(item);\n                            });\n                            return result;\n                        };\n\n                        // Divide each group into three arrays with balanced count\n                        const dividedData = {};\n                        Object.keys(groupedData).forEach(key => {\n                            const groupItems = groupedData[key];\n                            const approxItemCount = Math.ceil(groupItems.length / 3);\n                            dividedData[key] = divideArray(groupItems, 3);\n                        });\n                        $.each(dividedData, (_i, e)=>{\n                            $.each(e, (a,b) =>{\n                                if(a==1){\n                                    fields.push({\n                                        fieldtype: 'Column Break',\n                                        fieldname: 'cb'\n                                    });\n                                }\n                                $.each(b, (c,d)=>{\n                                    fields.push({\n                                        fieldtype: 'Check',\n                                        label: d.item_name,\n                                        fieldname: d.name,\n                                        hidden: 1\n                                    });\n                                });\n                                if(a==1){\n                                    fields.push({\n                                        fieldtype: 'Column Break',\n                                        fieldname: 'cb'\n                                    });\n                                }\n                            });\n                        });\n                        \n                        fields.push(\n                            {\n                                fieldname: 'sb_0',\n                                fieldtype: 'Section Break',\n                                label: 'Pricing'\n                            },\n                            {\n                                fieldname: 'hpp',\n                                fieldtype: 'Currency',\n                                label: 'HPP',\n                                reqd: 1,\n                                read_only: 1\n                            },\n                            {\n                                fieldname: 'col_2',\n                                fieldtype: 'Column Break'\n                            },\n                            {\n                                fieldname: 'margin',\n                                fieldtype: 'Percent',\n                                label: 'Margin',\n                                reqd: 1\n                            },\n                            {\n                                fieldname: 'col_3',\n                                fieldtype: 'Column Break'\n                            },\n                            {\n                                fieldname: 'price',\n                                fieldtype: 'Currency',\n                                label: 'Price',\n                                reqd: 1\n                            }\n                        );\n\n                        //create dialog\n                        const pb = new frappe.ui.Dialog({\n                            title: 'Create Product Bundle',\n                            fields: fields,\n                            size: 'extra-large',\n                            primary_action_label: 'Create',\n                            primary_action(values) {\n                                console.log(values);\n                                const exams = Object.keys(values).filter(key => values[key] === 1);\n                                const item_rec = exams.map(item => (\n                                {\n                                    item_code: item,\n                                    description: '',\n                                    qty: 1,\n                                    rate: 0,\n                                    uom: \"\",\n                                    parent: \"\"\n                                }));\n                                frappe.call({\n                                    method: 'kms.api.create_product_bundle_from_quotation',\n                                    freeze: true,\n                                    args: {\n                                        items: item_rec,\n                                        name: values.package_name,\n                                        price_list: '',\n                                        party_name: frm.doc.party_name,\n                                        quotation_to: frm.doc.quotation_to,\n                                        price: values.price,\n                                        margin: values.margin\n                                    },\n                                    callback: (r) => {\n                                        if(r.message) {\n                                            let item = frm.add_child('items');\n                                            item.item_code = r.message.name;\n                                            item.item_name = r.message.description;\n                                            item.description = r.message.description;\n                                            item.qty = values.qty;\n                                            item.uom = 'Unit';\n                                            item.rate = values.price;\n                                            item.warehouse = '';\n                                            frm.refresh_field(\"items\");\n                                        }\n                                    }\n                                });\n                                pb.hide();\n                            }\n                        });\n                        /***REACTIVITY ZONE***/\t                    \n                        //Margin and Price reactivity\n                        pb.fields_dict.margin.$input.on('change', ()=>{\n                            let hpp_field = Number(pb.fields_dict.hpp.get_value());\n                            if(hpp_field){\n                                pb.fields_dict.price.set_value(hpp_field+pb.fields_dict.margin.get_value()*hpp_field/100);\n                            }\n                        });\n                        pb.fields_dict.price.$input.on('change', ()=>{\n                            let hpp_field = Number(pb.fields_dict.hpp.get_value());\n                        if(hpp_field){\n                                pb.fields_dict.margin.set_value((pb.fields_dict.price.get_value()-hpp_field)/hpp_field*100);\n                            }\n                        });\n                        let selectedValues = new Set();\n                        \n                        //Copy From Reactivity\n                        pb.fields_dict.copy_from.$input.on('blur', ()=>{\n                            //get item from db\n                            let copy_from_value = pb.get_value('copy_from');\n                            if(copy_from_value){\n                                frappe.db.get_doc('Product Bundle', copy_from_value).then((copy_doc)=>{\n                                    console.log(copy_doc);\n                            //put items to checkboxes\n                                    if(copy_doc.items) {\n                                        $.each(copy_doc.items, (i_, e)=>{\n                                            pb.set_value(e.item_code, 1);\n                            //update table\n                                            selectedValues.add(e.item_code);\n                                        });\n                                        let table_html = processDataWithRate(r.message, [...selectedValues]);\n                                        pb.fields_dict.html_1.$wrapper.html(table_html);\n                            //update hpp, margin, price\n                                        pb.set_value('hpp', hpp);\n                                        pb.set_value('price', copy_doc.custom_rate);\n                                        pb.set_value('margin', copy_doc.custom_margin);\n                                    }\n                                });\n                            }\n                        });\n                        //create level 1 select event\n                        pb.fields_dict.select_1.$input.on('change', ()=>{\n\t                        //reset lower level selects\n                            pb.fields_dict.select_2.df.options = '';\n                            pb.fields_dict.select_2.df.hidden = 1;\n                            pb.fields_dict.select_3.df.options = '';\n                            pb.fields_dict.select_3.df.hidden = 1;\n                            pb.fields_dict.select_2.refresh();\n                            pb.fields_dict.select_3.refresh();\n                            //reset checkboxes\n                            $.each(r.message, (_i, e)=>{\n                                pb.fields_dict[`${e.name}`].df.hidden = 1;\n                                pb.fields_dict[`${e.name}`].refresh();\n                            });\n                            //create level 2 select\n                            const uniqueLv2 = [...new Set(r.message.filter(item => item.lv1 === pb.get_value('select_1')).map(item => item.lv2))].join('\\n');\n                            pb.fields_dict.select_2.df.options = uniqueLv2;\n                            pb.fields_dict.select_2.df.hidden = 0;\n                            pb.fields_dict.select_2.refresh();\n                            //create level 2 select event\n                            pb.fields_dict.select_2.$input.on('change', ()=>{\n                                //reset lower level selects\n                                pb.fields_dict.select_3.df.options = '';\n                                pb.fields_dict.select_3.df.hidden = 1;\n                                pb.fields_dict.select_3.refresh();\n                                const uniqueLv3 = [...new Set(r.message.filter(item => item.lv2 === pb.get_value('select_2')).map(item => item.lv3))].join('\\n');\n                                if(uniqueLv3){\n                                    //create level 2 select if available\n                                    pb.fields_dict.select_3.df.options = uniqueLv3;\n                                    pb.fields_dict.select_3.df.hidden = 0;\n                                    pb.fields_dict.select_3.refresh();\n                                    //create level 3 select event\n                                    pb.fields_dict.select_3.$input.on('change', ()=>{\n                                        $.each(r.message, (_i, e)=>{\n                                            pb.fields_dict[`${e.name}`].df.hidden = 1;\n                                            pb.fields_dict[`${e.name}`].refresh();\n                                        });\n                                        //display level 3 checkboxes\n                                        pb.fields_dict.sb_2.df.hidden = 0;\n                                        let display = r.message.filter(item => item.lv3 === pb.get_value('select_3')).map(item=>item.name);\n                                        $.each(display, (_i,e)=>{\n                                            pb.fields_dict[`${e}`].df.hidden=0;\n                                            pb.fields_dict[`${e}`].refresh();\n                                            //create level 3 checkboxes event\n                                            $(`input.input-with-feedback[data-fieldname=\"${e}\"]`).change(function(){\n                                                let checkbox = $(this);\n                                                let value = checkbox.attr('data-fieldname');\n                                                if (checkbox.is(':checked')) {\n                                                    selectedValues.add(value);\n                                                } else {\n                                                    selectedValues.delete(value);\n                                                }\n                                                let table_html = processDataWithRate(r.message, [...selectedValues])\n                                                pb.fields_dict.html_1.$wrapper.html(table_html);\n                                                pb.fields_dict.hpp.set_value(hpp);\n                                                pb.fields_dict.html_1.refresh();\n                                            });\n                                        });\n                                    });\n                                } else {\n                                    //no level 3 select available, reset level 2 instead\n                                    $.each(r.message, (_i, e)=>{\n                                        pb.fields_dict[`${e.name}`].df.hidden = 1;\n                                        pb.fields_dict[`${e.name}`].refresh();\n                                    });\n                                    pb.fields_dict.sb_2.df.hidden = 0;\n                                    let display = r.message.filter(item => item.lv2 === pb.get_value('select_2')).map(item=>item.name);\n                                    //display level 2 checkboxes\n                                    $.each(display, (_i,e)=>{\n                                        pb.fields_dict[`${e}`].df.hidden=0;\n                                        pb.fields_dict[`${e}`].refresh();\n                                        //create level 2 checkboxes event\n                                        $(`input.input-with-feedback[data-fieldname=\"${e}\"]`).change(function(){\n                                            let checkbox = $(this);\n                                            let value = checkbox.attr('data-fieldname');\n                                            if (checkbox.is(':checked')) {\n                                                selectedValues.add(value);\n                                            } else {\n                                                selectedValues.delete(value);\n                                            }\n                                            let table_html = processDataWithRate(r.message, [...selectedValues])\n                                            pb.fields_dict.html_1.$wrapper.html(table_html);\n                                            pb.fields_dict.hpp.set_value(Number(hpp));\n                                            pb.fields_dict.html_1.refresh();\n                                        });\n                                    });\n                                }\n                            });\n                        });\n\t                    /***REACTIVITY ZONE END***/\n                        pb.show();\n                    });\n                },\n                __('Get Items From'),\n                'btn_default'\n            );\n        }\n\t    \n\t    /***Custom button to create Blanket Order after quotation is submitted***/\n\t    if(frm.doc.docstatus===1 && ![\"Lost\", \"Ordered\"].includes(frm.doc.status)){\n\t        frm.add_custom_button(\n\t            __('Blanket Order'),\n\t            ()=> {\n\t                frappe.new_doc(\n\t                    'Blanket Order',\n\t                    {\n\t                        blanket_order_type: 'Selling',\n\t                        customer: frm.doc.party_name,\n\t                        custom_quotation: frm.doc.name\n\t                    },\n\t                    doc => {\n\t                        let today = frappe.datetime.get_today();\n\t                        doc.from_date = today;\n\t                        doc.to_date = frappe.datetime.add_months(today, 1);\n\t                        doc.items = [];\n\t                        $.each(frm.doc.items, (_i,e)=>{\n    \t                        let row = frappe.model.add_child(doc, \"items\");\n    \t                        row.item_code = e.item_code;\n    \t                        row.rate = e.rate;\n    \t                        row.item_name = e.item_name;\n    \t                        row.qty = e.qty;\n\t                        });\n\t                        refresh_field(\"items\");\n\t                    });\n\t            },\n\t            __('Create')\n\t        );\n\t    }\n    },\n\n    create_package_items_tab(frm) {\n\t    frappe.call({\n\t        method: 'kms.api.get_quotation_item',\n\t        freeze: true,\n\t        args: {quotation_no: frm.doc.name},\n\t        callback: (r) => {\n\t            if(r.message) {\n\t                console.log(r.message)\n\t                let prev_idx = '';\n\t                let prev_item_group = '';\n\t                \n            \t    cur_frm.fields_dict.custom_html_field.$wrapper.empty();\n            \t    cur_frm.fields_dict.custom_html_field.$wrapper.append(`<div class=\"grid-field\" id=\"pigf\"></div>`);\n            \t    $('#pigf').append(`<div class=\"form-grid-container\" id=\"pigc\"></div>`);\n            \t    $('#pigc').append(`<div class=\"form-grid\" id=\"pig\"></div>`);\n            \t    $('#pig').append(`<div class=\"grid-heading-row\" id=\"pighr\"></div)`);\n            \t    $('#pighr').append(`<div class=\"grid-row\" id=\"pigr\"></div>`);\n            \t    $('#pigr').append(`<div class=\"data-row row\" id=\"pidrr\"></div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-4\" id=\"picol1\"></div>`);\n            \t    $('#picol1').append(`<div class=\"static-area\" id=picol1s>Item Code</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-1 text-right\" id=\"picol2\"></div>`);\n            \t    $('#picol2').append(`<div class=\"static-area\" id=picol2s>Qty</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-2 text-right\" id=\"picol3\"></div>`);\n            \t    $('#picol3').append(`<div class=\"static-area\" id=picol5s>Rate</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-2 text-right\" id=\"picol4\"></div>`);\n            \t    $('#picol4').append(`<div class=\"static-area\" id=picol4s>Amount</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-3 text-right\" id=\"picol5\"></div>`);\n            \t    $('#picol5').append(`<div class=\"static-area\" id=picol5s>Total</div>`);\n            \t    \n            \t    $('#pig').append(`<div class=\"grid-body\" id=\"pigb\"></div)`);\n            \t    $('#pigb').append(`<div class=\"rows\" id=\"pir\"></div)`);\n            \t    \n\t                $.each(r.message, (_i, e) => {\n            \t        $('#pir').append(`<div class=\"grid-row\" data-idx=\"${_i}\" id=\"pigr${_i}\"></div>`);\n            \t        $(`#pigr${_i}`).append(`<div class=\"data-row row\" id=\"pidr${_i}\"></div>`);\n\t                    if(prev_idx != e.idx){\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-4 bold grid-heading-row\" id=\"pigscidx1${_i}\"></div>`);\n                \t        $(`#pigscidx1${_i}`).append(`<a href=\"/app/product-bundle/${e.name}\">&rsaquo; &rsaquo; ${e.bundle_name}</a>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-1 bold grid-heading-row\" id=\"pigscidx2${_i}\"></div>`);\n                \t        $(`#pigscidx2${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_qty, {\"fieldtype\":\"Int\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold grid-heading-row\" id=\"pigscidx3${_i}\"></div>`);\n                \t        $(`#pigscidx3${_i}`).append(`<div style=\"text-align: right\">${frappe.format(0, {\"fieldtype\":\"Currency\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold grid-heading-row\" id=\"pigscidx4${_i}\"></div>`);\n                \t        $(`#pigscidx4${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-3 bold grid-heading-row\" id=\"pigscidx5${_i}\"></div>`);\n                \t        $(`#pigscidx5${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_rate*e.quotation_qty, {\"fieldtype\":\"Currency\"})}</div>`);\n\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-12 bold grid-heading-row\" id=\"pigscig2${_i}\"></div>`);\n                \t        $(`#pigscig2${_i}`).append(`<a href=\"/app/item-group/${e.item_group}\">&rsaquo; ${e.item_group}</a>`);\n\t                    } else {\n\t                        if(prev_item_group != e.item_group){\n                    \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-12 bold grid-heading-row\" id=\"pigscig2${_i}\"></div>`);\n                    \t        $(`#pigscig2${_i}`).append(`<a href=\"/app/item-group/${e.item_group}\">&rsaquo; ${e.item_group}</a>`);\n\t                        }\n\t                    }\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-4 bold\" id=\"pigsc1${_i}\"></div>`);\n            \t        $(`#pigsc1${_i}`).append(`<a href=\"/app/item/${e.item_code}\">${e.item_name}</a>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-1 bold\" id=\"pigsc2${_i}\"></div>`);\n            \t        $(`#pigsc2${_i}`).append(`<div style=\"text-align: right\">1</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold\" id=\"pigsc3${_i}\"></div>`);\n            \t        $(`#pigsc3${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_cogs, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold\" id=\"pigsc4${_i}\"></div>`);\n            \t        $(`#pigsc4${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-3 bold\" id=\"pigsc5${_i}\"></div>`);\n            \t        $(`#pigsc5${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        prev_idx = e.idx;\n            \t        prev_item_group = e.item_group;\n\t                });\n\t            }\n\t        }\n\t    });\n\t}\n});\n\nlet hpp = 0;\nfunction processDataWithRate(source, param) {\n    // Step 1: Make a temporary array of distinct lv1 from the data filtered by parameter\n    const lv1Set = new Set();\n    param.forEach(item => {\n        const found = source.find(dataItem => dataItem.name === item);\n        if (found && found.lv1) {\n            lv1Set.add(found.lv1);\n        }\n    });\n    const distinctLv1 = Array.from(lv1Set);\n\n    // Step 2: For each lv1 data, gather its item name and its rate from the data filtered by parameter\n    const lv1Data = [];\n    distinctLv1.forEach(lv1 => {\n        const itemsWithRate = param.reduce((acc, item) => {\n            const found = source.find(dataItem => dataItem.name === item);\n            if (found && found.lv1 === lv1 && found.item_name && found.rate) {\n                acc.push({ item_name: found.item_name, rate: found.rate });\n            }\n            return acc;\n        }, []);\n        lv1Data.push({ lv1, items_with_rate: itemsWithRate });\n    });\n\n  // Step 3: Return an array of objects with lv1 data followed by correlated item names and their rates\n    const result = [];\n    lv1Data.forEach(item => {\n        result.push({ lv1: item.lv1 });\n        item.items_with_rate.forEach(itemWithRate => {\n            result.push({ item_name: itemWithRate.item_name, rate: itemWithRate.rate });\n        });\n    });\n    let table_html = '<table border=\"1\"><tr><th>Selected Options</th><th>HPP</th></tr>';\n    hpp = 0;\n    result.forEach(kolom=>{\n    \ttable_html += `<tr><td>${kolom.lv1?kolom.lv1:kolom.item_name}</td><td>${kolom.rate?new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(kolom.rate):''}</td></tr>`;\n      if(kolom.rate) hpp+=kolom.rate\n    });\n    \n    table_html += `<tr><td>Total</td><td>${new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(hpp)}</td></tr>`;\n    table_html += '</table>';\n    return table_html;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-11-28 19:57:50.407924",
  "module": "KMS",
  "name": "Sales Order Item filter",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Sales Order Item', {\n\tonload(frm) {\n\t\tfrm.set_query(\"item_code\", function(){\n\t\t    return {\n\t\t        \"filters\": {\n\t\t            \"is_sales_item\" : true\n\t\t        }\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-11-11 19:51:42.945212",
  "module": "KMS",
  "name": "Item",
  "script": "frappe.ui.form.on(\"Item\", \"onload\", function(frm) {\n    frm.set_query(\"item_code\", function() {\n        return {\n            \"filters\": {\n                \"is_group\": false\n            }\n        };\n    });\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Product Bundle Settings",
  "enabled": 0,
  "modified": "2024-05-26 16:45:50.342571",
  "module": "KMS",
  "name": "Product Bundle Settings",
  "script": "frappe.ui.form.on('Product Bundle Settings', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"item_group\", \"item_group\", function (doc, cdt, cdn){\n\t\t    let d = locals[cdt][cdn];\n\t\t    return {\n\t\t        filters: {\n\t\t            is_group : false\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_item_group', ()=> {\n\t\t    return {\n\t\t        filters: {is_group: false}\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_cogs', ()=> {\n\t\t    return {\n\t\t        filters: {selling: true}\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_price_list', ()=> {\n\t\t    return {\n\t\t        filters: {selling: true}\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Blanket Order",
  "enabled": 1,
  "modified": "2023-11-22 06:58:44.357130",
  "module": "KMS",
  "name": "Blanket Order",
  "script": "frappe.ui.form.on('Blanket Order', {\n\tonload(frm) {\n\t\tfrm.set_query(\"customer\", ()=>{\n\t\t    return {\n\t\t        filters: {\n\t\t            customer_type: \"Company\"\n\t\t        }\n\t\t    };\n\t\t});\n\t},\n\ton_submit(frm) {\n\t    frappe.call(\n\t        'kms.api.update_quo_status',\n\t        {name: frm.doc.custom_quotation}\n        );\n\t    /*frappe.db.set_value('Quotation', frm.doc.custom_quotation, 'status', 'Ordered')\n\t    .then(doc =>{\n\t        console.log(doc);\n\t    });*/\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2023-12-06 14:20:24.886088",
  "module": "KMS",
  "name": "Clinical Procedure",
  "script": "frappe.ui.form.on('Clinical Procedure', {\n\tprocedure_template: function(frm) {\n\t\tif (frm.doc.procedure_template) {\n\t\t\tfrappe.call({\n\t\t\t\t'method': 'frappe.client.get',\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: 'Clinical Procedure Template',\n\t\t\t\t\tname: frm.doc.procedure_template\n\t\t\t\t},\n\t\t\t\tcallback: function (data) {\n\t\t\t\t\tfrm.set_value('medical_department', data.message.medical_department);\n\t\t\t\t\tfrm.set_value('consume_stock', data.message.consume_stock);\n\t\t\t\t\tfrm.events.set_warehouse(frm);\n\t\t\t\t\tfrm.events.set_procedure_consumables(frm);\n\t\t\t\t\t\n        \t\t\tfrappe.call({\n        \t\t\t\t\"method\": \"healthcare.healthcare.utils.get_medical_codes\",\n        \t\t\t\targs: {\n        \t\t\t\t\ttemplate_dt: \"Clinical Procedure Template\",\n        \t\t\t\t\ttemplate_dn: frm.doc.procedure_template,\n        \t\t\t\t},\n        \t\t\t\tcallback: function(r) {\n        \t\t\t\t\tif (!r.exc && r.message) {\n        \t\t\t\t\t\tfrm.doc.codification_table = []\n        \t\t\t\t\t\t$.each(r.message, function(k, val) {\n        \t\t\t\t\t\t\tif (val.medical_code) {\n        \t\t\t\t\t\t\t\tvar child = cur_frm.add_child(\"codification_table\");\n        \t\t\t\t\t\t\t\tchild.medical_code = val.medical_code\n        \t\t\t\t\t\t\t\tchild.medical_code_standard = val.medical_code_standard\n        \t\t\t\t\t\t\t\tchild.code = val.code\n        \t\t\t\t\t\t\t\tchild.description = val.description\n        \t\t\t\t\t\t\t\tchild.system = val.system\n        \t\t\t\t\t\t\t}\n        \t\t\t\t\t\t});\n        \t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n        \t\t\t\t\t} else {\n        \t\t\t\t\t\tfrm.clear_table(\"codification_table\")\n        \t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n        \t\t\t\t\t}\n        \t\t\t\t}\n        \t\t\t})\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrm.clear_table(\"codification_table\")\n\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2024-04-28 23:06:52.940286",
  "module": "KMS",
  "name": "Lab Test",
  "script": "frappe.ui.form.on('Lab Test', {\n\ttemplate: function(frm) {\n\t\tif (frm.doc.template) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"healthcare.healthcare.utils.get_medical_codes\",\n\t\t\t\targs: {\n\t\t\t\t\ttemplate_dt: \"Lab Test Template\",\n\t\t\t\t\ttemplate_dn: frm.doc.template,\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc && r.message) {\n\t\t\t\t\t\tfrm.doc.codification_table = [];\n\t\t\t\t\t\t$.each(r.message, function(k, val) {\n\t\t\t\t\t\t\tif (val.medical_code) {\n\t\t\t\t\t\t\t\tlet child = cur_frm.add_child(\"codification_table\");\n\t\t\t\t\t\t\t\tchild.medical_code = val.medical_code;\n\t\t\t\t\t\t\t\tchild.medical_code_standard = val.medical_code_standard;\n\t\t\t\t\t\t\t\tchild.code = val.code;\n\t\t\t\t\t\t\t\tchild.description = val.description;\n\t\t\t\t\t\t\t\tchild.system = val.system;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t\t\t\t\tfrappe.db.get_doc('Lab Test Template', frm.doc.template).then(doc=>{\n\t\t\t\t\t\t    //Get Worksheet & Result Legend Print \n\t\t\t\t\t\t    frm.doc.worksheet_instructions = doc.worksheet_instructions;\n\t\t\t\t\t\t    frm.doc.result_legend = doc.result_legend;\n\t\t\t\t\t\t    frm.doc.legend_print_position = doc.legend_print_position;\n\t\t\t\t\t\t    frm.refresh_field(\"worksheet_instructions\");\n\t\t\t\t\t\t    frm.refresh_field(\"result_legend\");\n\t\t\t\t\t\t    frm.refresh_field(\"legend_print_position\");\n    \t\t\t\t\t\t//Get Stock Consumption\n    \t\t\t\t\t\t//Create and Submit Stock Entry\n\t\t\t\t\t\t    /*console.log(doc);\n\t\t\t\t\t\t    frm.doc.custom_consumables = [];\n\t\t\t\t\t\t    $.each(doc.custom_consumables, (_i, e) => {\n\t\t\t\t\t\t        let cons = cur_frm.add_child(\"custom_consumables\");\n\t\t\t\t\t\t        cons.item_code = e.item_code;\n\t\t\t\t\t\t        cons.qty = e.qty;\n\t\t\t\t\t\t        cons.uom = e.uom;\n\t\t\t\t\t\t        cons.stock_uom = e.stock_uom;\n\t\t\t\t\t\t        cons.invoice_separately_as_consumable = e.invoice_separately_as_consumable;\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t    frm.refresh_field(\"custom_consumables\");*/\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfrm.clear_table(\"codification_table\");\n\t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrm.clear_table(\"codification_table\");\n\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t}\n\t},\n\tsetup(frm){\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        }\n\t    })\n\t    if(frm.doc.custom_selective_test_result&&frm.doc.docstatus===0){\n\t        frm.refresh_field('custom_selective_test_result');\n\t        $.each(frm.doc.custom_selective_test_result, (key, value) => {\n\t            //frm.fields_dict.custom_selective_test_result.grid.grid_rows[key].result_set.options = value.result_options;\n\t            console.log(frm.fields_dict.custom_selective_test_result.get_value()[key].result_set)\n\t            console.log(frm.fields_dict.custom_selective_test_result.grid.grid_rows[key].docfields[1].options)\n\t            frm.fields_dict.custom_selective_test_result.grid.grid_rows[key].docfields[1].options=frm.fields_dict.custom_selective_test_result.get_value()[key].result_set\n\t        });\n\t        frm.refresh_field('custom_selective_test_result');\n\t    }\n\t    //frm.fields_dict.custom_selective_test_result.grid.update_docfield_property()\n\t    //console.log(frm.fields_dict.custom_selective_test_result.get_value()[i].result_set)\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test Batch",
  "enabled": 1,
  "modified": "2023-12-27 16:51:04.738862",
  "module": "KMS",
  "name": "Lab Test Batch",
  "script": "frappe.ui.form.on('Lab Test Batch', {\n\trefresh(frm) {\n\t\tif(frm.doc.docstatus === 0){\n\t\t    frm.add_custom_button(\n\t\t        __('Get Sample Collection'),\n\t\t        () => {\n\t\t            let sample;\n\t\t            frappe.db.get_value('Lab Test Template', frm.doc.test_template, 'sample').then(r=>{sample = r.message.sample});\n\t\t            new frappe.ui.form.MultiSelectDialog({\n\t\t                doctype: 'Sample Collection',\n\t\t                target: frm,\n\t\t                date_field: 'collected_time',\n\t\t                add_filters_group: 1,\n\t\t                setters: {\n\t\t                    patient: null,\n\t\t                    patient_sex: null\n\t\t                },\n\t\t                get_query() {\n\t\t                    return {\n\t\t                        filters: {\n\t\t                            company: frm.doc.company,\n\t\t                            sample: sample,\n\t\t                            custom_service_unit: frm.doc.service_unit,\n\t\t                            docstatus: 1,\n\t\t                            custom_lab_test_batch: ''\n\t\t                        }\n\t\t                    };\n\t\t                },\n\t\t                action(selections){\n\t\t                    frappe.call({\n\t\t                        method: 'set_lab_test_run_on_samples',\n\t\t                        doc: frm.doc,\n\t\t                        args: selections\n\t\t                    });\n\t\t                    cur_dialog.hide();\n\t\t                }\n\t\t            });\n\t\t        },\n\t\t        __('Actions'),\n\t\t        'btn-default'\n            );\n\t\t}\n\t},\n\tsetup(frm){\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        };\n\t    });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sample Collection",
  "enabled": 1,
  "modified": "2024-06-18 11:42:00.823043",
  "module": "KMS",
  "name": "Sample Collection",
  "script": "frappe.ui.form.on('Sample Collection', {\n\tsetup(frm) {\n\t\tfrm.set_query('custom_service_unit', () => {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\tis_group: 0,\n\t\t\t\t\tcompany: frm.doc.company\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t},\n\trefresh(frm) { \n\t    //Initialize buttons \n\t\tfrm.add_custom_button('Remove', () => {\n\t\t\tremove(frm);\n\t\t}, 'Status');\n\t\tfrm.fields_dict['custom_refuse'].df.hidden = true;\n\t\tfrm.refresh_field('custom_refuse');\n\t\tfrm.fields_dict['custom_give_cup'].df.hidden = true;\n\t\tfrm.refresh_field('custom_give_cup'); \n\t\t//populate lab test data \n\t\tif (frm.doc.custom_lab_test) {\n\t\t\tfrappe.db.get_doc('Lab Test', frm.doc.custom_lab_test).then(doc => {\n\t\t\t\tcur_frm.fields_dict.custom_lab_test_table.$wrapper.empty();\n\t\t\t\tcur_frm.fields_dict.custom_lab_test_table.$wrapper.append(`<table class=\"form-grid\"><thead class=\"grid-heading-row\"><tr class=\"grid-row\"><th class=\"col grid-static-col col-xs-2 \">Test Name</th><th class=\"col grid-static-col col-xs-2 \">Event</th><th class=\"col grid-static-col col-xs-1 \">UOM</th><th class=\"col grid-static-col col-xs-2 \">Min Value</th><th class=\"col grid-static-col col-xs-2 \">Max Value</th></tr></thead><tbody class=\"grid-body\">`);\n\t\t\t\t$.each(doc.normal_test_items, (_i, e) => {\n\t\t\t\t\tcur_frm.fields_dict.custom_lab_test_table.$wrapper.append(`<tr class=\"grid-row\"><td class=\"col grid-static-col col-xs-2 \">${e.lab_test_name}</td><td class=\"col grid-static-col col-xs-2 \">${e.lab_test_event}</td><td class=\"col grid-static-col col-xs-1 \">${e.lab_test_uom?e.lab_test_uom:''}</td><td class=\"col grid-static-col col-xs-2\" style=\"text-align: right\">${e.custom_min_value}</td><td class=\"col grid-static-col col-xs-2\" style=\"text-align: right\">${e.custom_max_value}</td></tr>`);\n\t\t\t\t});\n\t\t\t\tcur_frm.fields_dict.custom_lab_test_table.$wrapper.append(`</tbody></table>`);\n\t\t\t});\n\t\t} \n\t\t//setup Refuse button \n\t\tif (frm.doc.custom_status === 'Started') {\n\t\t\tfrm.fields_dict['custom_refuse'].input.onclick = function() {\n\t\t\t\trefuse_to_test(frm);\n\t\t\t}\n\t\t\tfrm.add_custom_button('Check In', () => {\n\t\t\t    frappe.call({\n\t\t\t        method: 'kms.sample_collection.check_in',\n\t\t\t       args: {\n\t\t\t           name: frm.doc.name\n\t\t\t       },\n\t\t\t       callback: function(r) {\n\t\t\t           if(r.message){\n\t\t\t               frm.reload_doc();\n\t\t\t           }\n\t\t\t       }\n\t\t\t    });\n\t\t\t    /*if(frm.doc.custom_dispatcher){\n\t\t\t\t    frappe.call({\n\t\t\t\t\tmethod: 'frappe.client.get',\n\t\t\t\t\targs: {\n\t\t\t\t\t\tdoctype: 'Dispatcher',\n\t\t\t\t\t\tname: frm.doc.custom_dispatcher\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function(response) {\n\t\t\t\t\t\tif (response.message) {\n\t\t\t\t\t\t\tlet disp_doc = response.message;\n\t\t\t\t\t\t\tdisp_doc.status = 'In Room'\n\t\t\t\t\t\t\tdisp_doc.assignment_table.forEach(row => {\n\t\t\t\t\t\t\t\tif (row.healthcare_service_unit == frm.doc.custom_service_unit) row.status = 'Ongoing Examination';\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\tmethod: 'frappe.client.save',\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tdoc: disp_doc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcallback: function(save_response) {\n\t\t\t\t\t\t\t\t\tfrm.doc.custom_sample_table.forEach(row => {\n\t\t\t\t\t\t\t\t\t\trow.status = 'Checked In';\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tfrm.doc.custom_status = 'Checked In';\n\t\t\t\t\t\t\t\t\tfrm.refresh_field('custom_status');\n\t\t\t\t\t\t\t\t\tfrm.refresh_field('custom_sample_table');\n\t\t\t\t\t\t\t\t\tfrm.dirty();\n\t\t\t\t\t\t\t\t\tfrm.save();\n\t\t\t\t\t\t\t\t\tfrappe.show_alert({\n\t\t\t\t\t\t\t\t\t\tmessage: 'Dispatcher status updated with In Room.',\n\t\t\t\t\t\t\t\t\t\tindicator: 'green'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t    } else {\n\t\t\t        null;\n\t\t\t    }*/\n\t\t\t}, 'Status');\n\t\t}\n\t\tif (frm.doc.custom_status === 'Checked In') {\n\t\t\tfrm.fields_dict['custom_give_cup'].input.onclick = function() {\n\t\t\t\tgive_cup(frm);\n\t\t\t};\n\t\t\tfrm.fields_dict['custom_refuse'].input.onclick = function() {\n\t\t\t\trefuse_to_test(frm);\n\t\t\t}\n\t\t\tfrm.trigger('check_lines_status');\n\t\t}\n\t\tif (frm.doc.custom_status === 'Partially Finished') {\n\t\t\tfrm.remove_custom_button('Remove', 'Status');\n\t\t}\n\t\tif (frm.doc.custom_status === 'Refused') {\n\t\t\tfrm.remove_custom_button('Remove', 'Status');\n\t\t}\n\t\tif (frm.doc.custom_status === 'Finished') {\n\t\t\tfrm.remove_custom_button('Remove', 'Status');\n\t\t}\n\t\tif (frm.doc.custom_status === 'Removed') {\n\t\t\tfrm.remove_custom_button('Remove', 'Status');\n\t\t}\n\t},\n\tbefore_submit(frm) {\n\t\tif (frm.doc.custom_status === 'Partially Finished' || frm.doc.custom_status === 'Finished') {\n\t\t    frm.doc.collected_by = frappe.session.user;\n\t\t    let sekarang = new Date();\n\t\t    frm.doc.collected_time = formatDate(sekarang);\n\t\t\tfrm.refresh_field('collected_by');\n\t\t\tfrm.refresh_field('collected_time');\n\t\t    //frappe.throw(formatDate(sekarang));\n\t\t\tfrm.save();\n\t\t\tif (frm.doc.custom_dispatcher) {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'frappe.client.get',\n\t\t\t\t\targs: {\n\t\t\t\t\t\tdoctype: 'Dispatcher',\n\t\t\t\t\t\tname: frm.doc.custom_dispatcher\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function(response) {\n\t\t\t\t\t\tif (response.message) {\n\t\t\t\t\t\t\tlet disp_doc = response.message;\n\t\t\t\t\t\t\tlet count_row = 0;\n\t\t\t\t\t\t\tlet count_finished = 0;\n\t\t\t\t\t\t\tdisp_doc.assignment_table.forEach(row => {\n\t\t\t\t\t\t\t    count_row += 1;\n\t\t\t\t\t\t\t    if (row.status === 'Finished Examination'||row.status === 'Refused to Test') count_finished += 1;\n\t\t\t\t\t\t\t\tif (row.healthcare_service_unit == frm.doc.custom_service_unit) {\n\t\t\t\t\t\t\t\t    row.status = 'Finished Examination';\n\t\t\t\t\t\t\t\t    count_finished += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (count_row === count_finished) {\n\t\t\t\t\t\t\t    disp_doc.status = 'Waiting to Finish';\n\t\t\t\t\t\t\t    disp_doc.room = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\tmethod: 'frappe.client.save',\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tdoc: disp_doc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcallback: function(save_response) {\n\t\t\t\t\t\t\t\t\tfrappe.msgprint('Dispatcher status updated with Finished Examination.');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfrappe.throw('Status must be Partially Finished or Finished to Submit.');\n\t\t}\n\t},\n\tonload_post_render(frm) {\n\t\tfrm.fields_dict['custom_sample_table'].grid.wrapper.on('change', 'input, select', function() {\n\t\t\tcheck_button_state(frm);\n\t\t});\n\t\tfrm.fields_dict['custom_sample_table'].grid.wrapper.on('change', '.grid-row-check', function() {\n\t\t\tcheck_button_state(frm);\n\t\t});\n\t\tfrm.fields_dict['custom_sample_table'].grid.wrapper.find('.grid-add-row').hide();\n\t\tfrm.fields_dict['custom_sample_table'].grid.wrapper.find('.grid-remove-rows').hide();\n\t},\n\tcheck_lines_status(frm) {\n\t\tconst total_rows = frm.doc.custom_sample_table.length;\n\t\tlet finished_rows = 0;\n\t\tlet refused_rows = 0;\n\t\tfrm.doc.custom_sample_table.forEach(row => {\n\t\t\tif (row.status === 'Finished') {\n\t\t\t\tfinished_rows += 1;\n\t\t\t} else if (row.status === 'Refused') {\n\t\t\t\trefused_rows += 1;\n\t\t\t}\n\t\t});\n\t\tif (total_rows === finished_rows) {\n\t\t\tfrm.doc.custom_status = 'Finished';\n\t\t\tfrm.refresh_field('custom_status');\n\t\t\tfrm.dirty();\n\t\t\tfrm.save();\n\t\t} else if (total_rows === refused_rows) {\n\t\t\tfrm.doc.custom_status = 'Refused';\n\t\t\tfrm.refresh_field('custom_status');\n\t\t\tfrm.dirty();\n\t\t\tfrm.save();\n\t\t} else if (total_rows === refused_rows + finished_rows) {\n\t\t\tfrm.doc.custom_status = 'Partially Finished';\n\t\t\tfrm.refresh_field('custom_status');\n\t\t\tfrm.dirty();\n\t\t\tfrm.save();\n\t\t}\n\t}\n});\n\nfunction check_button_state(frm) {\n\tlet show_refuse_to_test_button = false;\n\tlet show_give_cup_button = false;\n\tlet selected_rows = frm.fields_dict['custom_sample_table'].grid.get_selected_children();\n\tif (selected_rows.length > 0) {\n\t\t/*for (let row of selected_rows) {\n\t\t\tif (row.status === 'Refused' || row.status === 'Finished' || row.status === 'Started') {\n\t\t\t\tshow_refuse_to_test_button = false;\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tshow_refuse_to_test_button = true;\n\t\t\t}\n\t\t}*/\n\t\tfor (let row of selected_rows) {\n\t\t\tif (row.status === 'Checked In') {\n\t\t\t\tshow_give_cup_button = true;\n\t\t\t\tshow_refuse_to_test_button = true;\n\t\t\t} else {\n\t\t\t\tshow_give_cup_button = false;\n\t\t\t\tshow_refuse_to_test_button = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\tfrm.fields_dict['custom_refuse'].df.hidden = !show_refuse_to_test_button;\n\tfrm.refresh_field('custom_refuse');\n\tfrm.fields_dict['custom_give_cup'].df.hidden = !show_give_cup_button;\n\tfrm.refresh_field('custom_give_cup');\n}\n\nfunction refuse_to_test(frm) {\n\tlet selected_rows = frm.fields_dict['custom_sample_table'].grid.get_selected_children();\n\tif (selected_rows.length > 0 && selected_rows) {\n\t    frappe.prompt('Enter refuse reason', ({value})=>{\n\t\t    frappe.call({\n    \t        method: 'kms.sample_collection.refuse_to_test',\n    \t        args: {\n    \t            name: frm.doc.name,\n    \t            selected: selected_rows,\n    \t            reason: value\n    \t        },\n    \t        callback: function(r) {\n    \t            if(r.message){\n        \t            //frm.refresh_field('custom_sample_table');\n        \t            //frm.refresh_field('custom_status');\n                    \tfrm.reload_doc();\n    \t            }\n    \t        }\n    \t    })\n\t    })\n\t}\n}\n\nfunction give_cup(frm) {\n\tlet selected_rows = frm.fields_dict['custom_sample_table'].grid.get_selected_children();\n\tif (selected_rows.length > 0 && selected_rows) {\n\t\tselected_rows.forEach(row => {\n\t\t\tfrappe.model.set_value(row.doctype, row.name, 'status', 'Finished');\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'frappe.client.set_value',\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: 'Dispatcher',\n\t\t\t\t\tname: frm.doc.custom_dispatcher,\n\t\t\t\t\tfieldname: 'intro',\n\t\t\t\t\tvalue: 'Refuse to test ' || row.sample\n\t\t\t\t},\n\t\t\t\tcallback: function(response) {\n\t\t\t\t\tif (response.message) {\n\t\t\t\t\t\tfrappe.msgprint('Intro text updated successfully for Dispatcher');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfrappe.msgprint('Failed to update intro text');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tfrm.save();\n\t\tfrm.refresh_field('custom_sample_table');\n\t}\n}\n\nfunction remove(frm) {\n    frappe.prompt('Enter reason to remove', ({value})=>{\n        frappe.call({\n            method: 'kms.sample_collection.remove',\n            args: {\n                name: frm.doc.name,\n                reason: value\n            },\n            callback: function(r) {\n                if(r.message) {\n                    frm.reload_doc();\n                }\n            }\n        })\n    })\n    //frm.refresh();\n    /*if(frm.doc.custom_dispatcher){\n    \tfrappe.call({\n    \t\tmethod: 'frappe.client.get',\n    \t\targs: {\n    \t\t\tdoctype: 'Dispatcher',\n    \t\t\tname: frm.doc.custom_dispatcher\n    \t\t},\n    \t\tcallback: function(response) {\n    \t\t\tif (response.message) {\n    \t\t\t\tlet disp_doc = response.message;\n    \t\t\t\tdisp_doc.status = 'In Queue'\n    \t\t\t\tdisp_doc.assignment_table.forEach(row => {\n    \t\t\t\t\tif (row.healthcare_service_unit == frm.doc.custom_service_unit) row.status = 'Wait for Room Assignment';\n    \t\t\t\t});\n    \t\t\t\tfrappe.call({\n    \t\t\t\t\tmethod: 'frappe.client.save',\n    \t\t\t\t\targs: {\n    \t\t\t\t\t\tdoc: disp_doc\n    \t\t\t\t\t},\n    \t\t\t\t\tcallback: function(save_response) {\n    \t\t\t\t\t\tfrm.doc.custom_sample_table.forEach(row => {\n    \t\t\t\t\t\t\trow.status = 'Removed';\n    \t\t\t\t\t\t});\n    \t\t\t\t\t\tfrm.doc.custom_status = 'Removed';\n    \t\t\t\t\t\tfrm.refresh_field('custom_status');\n    \t\t\t\t\t\tfrm.refresh_field('custom_sample_table');\n    \t\t\t\t\t\tfrm.save();\n    \t\t\t\t\t\tfrappe.db.insert({\n    \t\t\t\t\t\t    doctype: 'Notification Log',\n    \t\t\t\t\t\t    for_user: '',\n    \t\t\t\t\t\t    type: 'Alert',\n    \t\t\t\t\t\t    subject: '',\n    \t\t\t\t\t\t    document_type: \"Sample Collection\",\n    \t\t\t\t\t\t    document_name: frm.doc.name\n    \t\t\t\t\t\t}).then(doc=>{\n    \t\t\t\t\t\t    console.log(doc);\n    \t\t\t\t\t\t})\n    \t\t\t\t\t\tfrappe.show_alert({\n    \t\t\t\t\t\t\tmessage: 'Dispatcher status updated with In Queue.',\n    \t\t\t\t\t\t\tindicator: 'blue'\n    \t\t\t\t\t\t});\n    \t\t\t\t\t}\n    \t\t\t\t});\n    \t\t\t}\n    \t\t}\n    \t});\n    } else {\n        null;\n    }*/\n}\n\nfunction formatDate(date) {\n    const pad = (num) => (num < 10 ? '0' : '') + num;\n\n    const day = pad(date.getDate());\n    const month = pad(date.getMonth() + 1); // Months are zero-based\n    const year = date.getFullYear();\n    const hours = pad(date.getHours());\n    const minutes = pad(date.getMinutes());\n    const seconds = pad(date.getSeconds());\n\n    return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Radiology",
  "enabled": 0,
  "modified": "2024-06-27 08:11:37.898278",
  "module": "KMS",
  "name": "Radiology",
  "script": "frappe.ui.form.on('Radiology', {\n\ttemplate: (frm) => {\n\t\tif(frm.doc.template) {\n\t\t    frappe.db.get_doc('Radiology Result Template', frm.doc.template).then(doc=>{\n\t\t        $.each(doc.items, (key, value) => {\n\t\t            let result = cur_frm.add_child('result');\n\t\t            result.result_line = value.result_text;\n\t\t            result.normal_value = value.normal_value;\n\t\t            result.result_check = value.normal_value;\n\t\t            result.item_code = doc.item_code;\n\t\t            result.result_options = value.result_select;\n\t\t            frappe.db.get_value('Item', doc.item_code, 'item_name').then(i => {result.item_name =i.message.item_name});\n\t\t        });\n\t\t        frm.refresh_field('result');\n\t\t        $.each(doc.items, (key, value) => {\n\t\t            frm.fields_dict.result.grid.grid_rows[key].docfields[3].options = value.result_select.split(\"\\n\");\n                    console.log(frm.fields_dict.result.grid);\n\t\t        });\n\t\t    });\n\t\t}\n\t},\n\tappointment: (frm) => {\n        frm.add_fetch('appointment', 'patient', 'patient');\n\t},\n\tqueue_pooling: (frm) => {\n\t    frm.add_fetch('queue_pooling', 'appointment', 'appointment');\n\t    frm.add_fetch('queue_pooling', 'patient', 'patient');\n\t},\n\trefresh: (frm) => {\n\t  frm.set_query('appointment', () =>{\n\t      return {\n\t          filters: {\n\t              status: ['in', ['Open', 'Checked In']]\n\t          }\n\t      };\n\t  });\n\t  frm.set_query('queue_pooling', () =>{\n\t      return {\n\t          filters: {\n\t              status: ['in', ['Queued', 'Ongoing']]\n\t          }\n\t      };\n\t  });\n\t  frm.set_query('service_unit', () => {\n\t      return {\n\t          filters: {\n\t              service_unit_type: 'Radiology'\n\t          }\n\t      };\n\t  });\n\t},\n\tsetup(frm) {\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        };\n\t    });\n\t    if(frm.doc.result&&frm.doc.docstatus===0){\n\t        frm.refresh_field('result');\n\t        $.each(frm.doc.result, (key, value) => {\n\t            frm.fields_dict.result.grid.grid_rows[key].docfields[3].options = value.result_options;\n\t        });\n\t    }\n\t}\n});\n\nfrappe.ui.form.on('Radiology Result', {\n\tresult_check(frm, cdt, cdn) {\n\t\tlet d = locals[cdt][cdn];\n\t\tlet current_row = frm.fields_dict.result.grid.grid_rows_by_docname[d.name];\n\t\tcurrent_row.toggle_editable('result_text', (d.result_check !== d.normal_value));\n\t\tcurrent_row.toggle_reqd('result_text', (d.result_check !== d.normal_value));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-01-08 20:40:29.663666",
  "module": "KMS",
  "name": "Patient",
  "script": "frappe.ui.form.on('Patient', {\n\tsetup(frm) {\n\t\tfrm.set_query('customer_group', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            is_group: 0,\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('territory', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            is_group: 0,\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('custom_company', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            customer_type: 'Company',\n\t\t        }\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Appointment",
  "enabled": 1,
  "modified": "2024-06-17 17:47:48.333625",
  "module": "KMS",
  "name": "Patient Appointment",
  "script": "frappe.ui.form.on('Patient Appointment', {\n\tcustom_type(frm) {\n\t\tif(frm.doc.custom_type==='Insurance') {\n\t\t    let filters = [];\n\t\t    frappe.db.get_doc('Patient', frm.doc.patient).then(patient=>{\n\t\t        $.each(patient.custom_insurance_table, (key, value)=>{\n\t\t            filters.push(value.provider);\n\t\t        });\n\t\t    });\n\t\t    frm.set_query('custom_provider', ()=>{\n\t\t        return{\n\t\t            filters:{'health_insurance_name': ['in', filters]}\n\t\t        };\n\t\t    });\n\t\t}\n\t},\n\tcustom_provider(frm) {\n\t    frappe.db.get_doc('Patient', frm.doc.patient).then(patient=>{\n\t        $.each(patient.custom_insurance_table, (key, value)=>{\n\t            if(value.provider===frm.doc.custom_provider){\n\t                frm.doc.custom_number = value.number;\n\t                frm.doc.custom_valid_to = value.valid_to;\n\t            }\n\t        });\n\t    });\n\t},\n\tappointment_type(frm) {\n\t    if(frm.doc.appointment_type==='MCU') {\n\t        frm.set_value('custom_priority', '4. MCU');\n\t        frm.enable_save();\n\t    }\n\t},\n    mcu(frm) {\n        if(frm.doc.mcu&&frm.doc.custom_branch) {\n            /*frappe.call({\n                method: 'kms.api.populate_mcu',\n                args: {\n                    appointment: frm.doc.name,\n                    mcu: frm.doc.mcu,\n                    branch: frm.doc.custom_branch\n                },\n                callback: function(r){\n                    frm.refresh_field(\"custom_mcu_exam_items\");\n                }\n            });*/\n            frappe.db.get_doc('Product Bundle', frm.doc.mcu).then(pb=>{\n                $.each(pb.items, (key, value)=>{\n                    let items = frm.add_child('custom_mcu_exam_items');\n                    items.examination_item = value.item_code;\n                    items.status = 'Started';\n                });\n            frm.refresh_field(\"custom_mcu_exam_items\");\n\t      });\n        }\n\t},\n\trefresh(frm) {\n\t    frm.remove_custom_button('Vital Signs', 'Create');\n\t    frm.remove_custom_button('Patient Encounter', 'Create');\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                service_unit_type: frm.doc.appointment_type,\n\t                custom_branch: frm.doc.custom_branch\n\t            }\n\t        };\n\t    });\n\t    if(frm.doc.status === 'Open'){\n    \t    frm.add_custom_button(\n    \t        'Check In',\n    \t        ()=>{\n    \t            frm.set_value('status', 'Checked In');\n    \t            frm.save();\n\t        });\n\t    }\n\t    frm.fields_dict['custom_mcu_exam_items'].grid.get_field('examination_item').get_query = function(doc, cdt, cdn) {\n            var child = locals[cdt][cdn];\n            return {\n                filters: [\n                    ['Item', 'is_stock_item', '=', 0],\n                    ['Item', 'disabled', '=', 0],\n                    ['Item', 'is_sales_item', '=', 1],\n                    ['Item', 'item_group', '!=', 'Exam Course'],\n                ]\n            };\n        };\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Queue Pooling",
  "enabled": 1,
  "modified": "2024-02-09 07:05:17.158218",
  "module": "KMS",
  "name": "Queue Pooling",
  "script": "frappe.ui.form.on('Queue Pooling', {\n\trefresh(frm) {\n\t\tif(frm.doc.status === 'Queued'&& !frm.doc.encounter){\n\t\t    const now = new Date();\n\t\t    const hour = now.getHours();\n\t\t    const minute = now.getMinutes();\n\t\t    const second = now.getSeconds();\n\t\t    const formattedTime = hour + \":\" + minute + \":\" + second;\n\t\t    frm.add_custom_button(\n\t\t        __('Cancel'),\n\t\t        ()=> {\n\t\t            frappe.prompt([\n\t\t                {\n\t\t                    label: 'Cancel Reason',\n\t\t                    fieldname: 'cancel_reason',\n\t\t                    fieldtype: 'Data',\n\t\t                    reqd: true\n\t\t                }], (values)=>{\n        \t\t            frappe.db.set_value('Queue Pooling', frm.doc.name, {\n        \t\t                status: 'Cancelled',\n        \t\t                cancelled_time: formattedTime,\n        \t\t                cancel_reason: values.cancel_reason\n        \t\t            });\n\t\t                });\n\t\t        });\n            frm.add_custom_button(\n                __('Create Encounter'), \n                ()=>{\n                    frappe.new_doc('Patient Encounter',{\n                        appointment: frm.doc.appointment,\n                        patient: frm.doc.patient,\n                        company: frm.doc.company,\n                        custom_queue_pooling: frm.doc.name,\n                        custom_service_unit: frm.doc.service_unit\n                    });\n                }\n            );\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 0,
  "modified": "2024-06-27 15:26:51.729071",
  "module": "KMS",
  "name": "Patient Encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\n    /****************** Event Overrides ******************/\n\trefresh(frm) {\n\t\tif(frm.is_new()){\n            frm.add_custom_button(\n                __('Get from Queue'),\n                ()=>{\n                    const d = new frappe.ui.form.MultiSelectDialog({\n                        doctype: 'Queue Pooling',\n                        target: frm,\n                        setters: {patient: null, appointment:null},\n                        get_query() {\n                            return {\n                                filters: {\n                                    company: frm.doc.company,\n                                    branch: frm.doc.custom_branch,\n                                    service_unit: frm.doc.custom_service_unit,\n                                    status: 'Queued'\n                                }\n                            };\n                        },\n                        action(selections){\n                            frappe.db.get_doc('Queue Pooling', selections[0]).then(doc=>{\n                                frm.doc.custom_queue_pooling = doc.name;\n                                frm.doc.appointment = doc.appointment;\n                                frm.doc.patient = doc.patient;\n                                frm.doc.appointment_type = doc.appointment_type;\n                                frappe.db.get_doc('Patient Appointment', doc.appointment).then(appointment=>{\n                                    frm.doc.patient_name = appointment.patient_name;\n                                    frm.doc.patient_sex = appointment.patient_sex;\n                                    frm.doc.patient_age = appointment.patient_age;\n                                    refresh_field('patient_name');\n                                    refresh_field('patient_sex');\n                                    refresh_field('patient_age');\n                                });\n                                refresh_field('custom_queue_pooling');\n                                refresh_field('appointment');\n                                refresh_field('patient');\n                                refresh_field('appointment_type');\n                            });\n                            d.dialog.hide();\n                        }\n                    });\n                    return d;\n                }\n            );\n\t\t}\n\t\tfrm.set_query(\"drug_code\", \"drug_prescription\", () =>{\n            return {\n                filters: {\n                    is_sales_item: 1,\n                    is_stock_item: 1\n                }\n            };\n        });\n\t    if(!frm.doc.custom_compound_medicine_dosage_form) {\n\t        frm.set_df_property('custom_compound_medicine_1', 'hidden', 1);\n\t    } else {\n\t        frm.set_df_property('custom_compound_medicine_1', 'hidden', 0);\n\t    }\n\t    //Dental Department\n\t    if(frm.doc.medical_department==='Dental') {\n\t        unhide_field('custom_dental');\n\t        frm.trigger('prepareDentalSections');\n\t        frm.trigger('prepareStaticDental');\n\t    }\n\t},\n\tonload(frm){\n\t    console.log('aaaabbbbaa')\n\t    if(frm.doc.medical_department==='Dental') {\n\t        unhide_field('custom_dental');\n\t        frm.trigger('prepareDentalSections');\n\t        frm.trigger('prepareStaticDental');\n\t    }\n\t},\n\t/****************** Buttons ******************/\n\tcustom_order_test(frm){\n\t    frappe.call({\n\t        method: 'kms.sample_collection.get_items'\n\t    }).then(res=>{\n\t        const itemGroups = res.message.item_group;\n\t        const laboratoryGroups = itemGroups.filter(group => group.parent_item_group === 'Laboratory').map(group => group.name);\n\t        let checkedItems = [];\n            let d = new frappe.ui.Dialog({\n                title: 'Pick Lab Test',\n                fields: [\n                    {\n                        label: 'Select Group 1',\n                        fieldname: 'first_select',\n                        fieldtype: 'Select',\n                        options: laboratoryGroups,\n                        reqd: 1,\n                        onchange() {\n                            handleFirstSelectChange(d, itemGroups, checkedItems);\n                        }\n                    },\n                    {\n                        label: 'Select Group 2',\n                        fieldname: 'second_select',\n                        fieldtype: 'Select',\n                        options: [],\n                        hidden: 1,\n                        onchange() {\n                            handleSecondSelectChange(d, itemGroups, checkedItems);\n                        }\n                    },\n                    {\n                        fieldname: 'item_selection',\n                        fieldtype: 'MultiCheck',\n                        label: 'Select Items',\n                        options: [],\n                        hidden: 1,\n                        reqd: 1\n                    }\n                ],\n                primary_action: function() {\n                    handleDialogSubmission(checkedItems, d, frm);\n                },\n                primary_action_label: 'Pick'\n            });\n            d.show();\n            d.$wrapper.on('change', '[data-fieldname=\"item_selection\"] .checkbox-options input[type=\"checkbox\"]', function() {\n                updateCheckedItems(d, checkedItems);\n            });\n            \n    \t    const handleDialogSubmission = (checkedItems, dialog, frm) => {\n    \t        checkedItems.forEach(item => {\n    \t            let child = frm.add_child('lab_test_prescription');\n    \t            frappe.model.set_value(child.doctype, child.name, 'lab_test_code', item);\n    \t        });\n    \t        frm.refresh_field('lab_test_prescription');\n    \t        frm.save();\n    \t        dialog.hide();\n    \t    };\n    \t    \n            const handleFirstSelectChange = (dialog, itemGroups, checkedItems) => {\n                const selectedGroup = dialog.get_value('first_select');\n                const selectedGroupData = itemGroups.find(group => group.name === selectedGroup);\n                const secondaryField = dialog.get_field('second_select');\n                const itemSelectionField = dialog.get_field('item_selection');\n            \n                secondaryField.df.options = [];\n                itemSelectionField.df.options = [];\n                secondaryField.df.hidden = 1;\n                itemSelectionField.df.hidden = 1;\n                secondaryField.refresh();\n                itemSelectionField.refresh();\n            \n                if (selectedGroupData && selectedGroupData.is_group) {\n                    const subGroups = itemGroups.filter(group => group.parent_item_group === selectedGroup).map(group => group.name);\n                    secondaryField.df.options = subGroups;\n                    secondaryField.df.hidden = 0;\n                    secondaryField.refresh();\n                } else {\n                    const groupItems = res.message.item.filter(item => item.lab_test_group === selectedGroup);\n                    itemSelectionField.df.options = groupItems.map(item => { \n                        return {\n                            label: item.name, \n                            value: item.name,\n                            checked: checkedItems.includes(item.name)\n                        };\n                    });\n                    itemSelectionField.df.hidden = 0;\n                    itemSelectionField.refresh();\n                }\n            };\n            \n            const handleSecondSelectChange = (dialog, itemGroups, checkedItems) => {\n                const selectedSubGroup = dialog.get_value('second_select');\n                const itemSelectionField = dialog.get_field('item_selection');\n            \n                itemSelectionField.df.options = [];\n                itemSelectionField.df.hidden = 1;\n                itemSelectionField.refresh();\n            \n                const groupItems = res.message.item.filter(item => item.lab_test_group === selectedSubGroup);\n                itemSelectionField.df.options = groupItems.map(item => { \n                    return {\n                        label: item.name, \n                        value: item.name,\n                        checked: checkedItems.includes(item.name)\n                    };\n                });\n                itemSelectionField.df.hidden = 0;\n                itemSelectionField.refresh();\n            };\n            \n            const updateCheckedItems = (dialog, checkedItems) => {\n                const checkboxes = dialog.$wrapper.find('[data-fieldname=\"item_selection\"] .checkbox-options input[type=\"checkbox\"]');\n                checkboxes.each(function() {\n                    const value = $(this).attr('data-unit');\n                    const index = checkedItems.indexOf(value);\n                    if ($(this).is(':checked')) {\n                        if(index==-1) checkedItems.push(value);\n                    } else {\n                        if(index !== -1) checkedItems.splice(index, 1);\n                    }\n                });\n                console.log(checkedItems);\n            };\n\t    });\n\n\t    /*frappe.call({\n            method: 'kms.api.get_items_to_create_lab'\n        }).then(doc=>{\n           const uniqueLv1 = [...new Set(doc.message.map(item=> item.lv2))].join('\\n');\n           const fields = [\n                {\n                   fieldname: 'sb1',\n                   fieldtype: 'Section Break'\n                },\n                {\n                   fieldname: 'select_1',\n                   fieldtype: 'Select',\n                   options: uniqueLv1\n                },\n                {\n                    fieldname: 'cb_1',\n                    fieldtype: 'Column Break'\n                },\n                {\n                    fieldname: 'select_2',\n                    fieldtype: 'Select',\n                    hidden: 1,\n                    options: '',\n                },\n                {\n                    fieldname: 'sb_3',\n                    fieldtype: 'Section Break',\n                    label: 'Select Lab Items',\n                    hidden: 0\n                },\n                {\n                    fieldname: 'html_1',\n                    fieldtype: 'HTML',\n                },\n            ];\n            \n            $.each(doc.message, (_i, e)=>{\n                fields.push({\n                    fieldtype: 'Check',\n                    label: e.item_name,\n                    fieldname: e.name,\n                    hidden: 1\n                });\n            });\n            //create dialog\n            const pb = new frappe.ui.Dialog({\n                title: 'Pick Lab Test',\n                fields: fields,\n                primary_action_label: 'Pick',\n                primary_action(values) {\n                    let filteredKeys = Object.keys(values).filter(key => values[key] === 1);\n                    // Create a new object with filtered keys\n                    let filteredData = {};\n                    filteredKeys.forEach(key => {\n                        filteredData[key] = values[key];\n                    });\n                    //filteredData.encounter = frm.doc.name;\n                    let selected = [];\n                    $.each(filteredKeys, (_i, e)=>{\n                        frappe.db.get_doc('Lab Test Template', null, {'lab_test_code': e}).then(ltt=>{\n                            selected.push(ltt.name);\n                            if(filteredKeys.length === selected.length) {\n                                console.log(selected)\n                        \t    frappe.call({\n                                    method: 'kms.api.create_sample_and_test',\n                                    args: {'enc': frm.doc.name, 'selected': selected, 'appt': frm.doc.appointment},\n                                    freeze: true,\n                                    callback: (r) => {\n                                        console.log('r', r);\n                                    }\n                                });\n                            }\n                        });\n                    });\n                    pb.hide();\n                    frm.refresh();\n                }\n            });\n            //select and checkbox reactivity\n            pb.fields_dict.select_1.$input.on('change', ()=>{\n                pb.fields_dict.select_2.df.options = '';\n                pb.fields_dict.select_2.df.hidden = 1;\n                pb.fields_dict.select_2.refresh();\n                $.each(doc.message, (_i, e)=>{\n                    pb.fields_dict[`${e.name}`].df.hidden = 1;\n                    pb.fields_dict[`${e.name}`].refresh();\n                });\n                const uniqueLv2 = [...new Set(doc.message.filter(item => item.lv2 === pb.get_value('select_1')).map(item => item.lv3))].join('\\n');\n                if(uniqueLv2){\n                    pb.fields_dict.select_2.df.options = uniqueLv2;\n                    pb.fields_dict.select_2.df.hidden = 0;\n                    pb.fields_dict.select_2.refresh();\n                    pb.fields_dict.select_2.$input.on('change', ()=>{\n                        $.each(doc.message, (_i, e)=>{\n                            pb.fields_dict[`${e.name}`].df.hidden = 1;\n                            pb.fields_dict[`${e.name}`].refresh();\n                        });\n                        let display = doc.message.filter(item => item.lv3 === pb.get_value('select_2')).map(item=>item.name);\n                        $.each(display, (_i,e)=>{\n                            pb.fields_dict[`${e}`].df.hidden=0;\n                            pb.fields_dict[`${e}`].refresh();\n                        });\n                    });\n                } else {\n                    $.each(doc.message, (_i, e)=>{\n                        pb.fields_dict[`${e.name}`].df.hidden = 1;\n                        pb.fields_dict[`${e.name}`].refresh();\n                    });\n                    let display = doc.message.filter(item => item.lv2 === pb.get_value('select_1')).map(item=>item.name);\n                    $.each(display, (_i,e)=>{\n                        pb.fields_dict[`${e}`].df.hidden=0;\n                        pb.fields_dict[`${e}`].refresh();\n                    });\n                }\n            });\n           pb.show();\n        });*/\n\t},\n\tcustom_order_medication(frm) {\n\t    frappe.call({\n\t        method: 'kms.api.create_mr_from_encounter',\n\t        args: {\n\t            'enc': frm.doc.name\n\t        },\n\t        callback: (r => {\n\t            frappe.msgprint(JSON.stringify(r.message));\n\t            frm.refresh();\n\t        }),\n\t        error: (r => {frappe.throw(JSON.stringify(r.message))}),\n\t    });\n\t},\n\tcustom_drug_dictionary(frm){\n\t    frappe.set_route('query-report/Medication Catalog');\n\t},\n\tcustom_compound_medicine_dosage_form(frm) {\n\t    if(!frm.doc.custom_compound_medicine_dosage_form) {\n\t        frm.set_df_property('custom_compound_medicine_1', 'hidden', 1);\n\t    } else {\n\t        frm.set_df_property('custom_compound_medicine_1', 'hidden', 0);\n\t    }\n\t},\n\t/****************** DocField on change ******************/\n\tcustom_type(frm) {\n\t    hide_field('custom_teeth_options');\n\t    frm.trigger('prepareDentalSections');\n\t    frm.trigger('prepareStaticDental');\n\t},\n\tcustom_other_add(frm, cdt, cdn){\n\t  let row = locals[cdt][cdn];\n\t  console.log('z')\n\t  frappe.ui.form.on('Other Dental', 'other', function(frm, cdt, cdn) {\n\t      console.log('a')\n\t      let child_row = locals[cdt][cdn];\n\t      if (child_row.other) {\n\t          console.log('b')\n\t          frappe.call({\n\t              method: 'frappe.client.get',\n\t              args: {\n\t                  doctype: 'Other Dental Option',\n\t                  name: child_row.other\n\t              },\n\t              callback: function (res){\n\t                  console.log('1')\n\t                  let dental_other = res.message;\n\t                  console.log('2')\n\t                  if(dental_other && dental_other.selective){\n\t                      console.log('3')\n\t                      let options = dental_other.selections.split('\\n');\n\t                      console.log('4')\n\t                      frm.fields_dict['custom_other'].grid.update_docfield_property('selective_value', 'options', options.join('\\n'));\n\t                      console.log('5')\n\t                      frm.fields_dict['custom_other'].grid.refresh();\n\t                  }\n\t              }\n\t          })\n\t      }\n\t  });\n\t},\n\t/****************** Triggers ******************/\n\tprepareDentalSections(frm) {\n\t    if(frm.doc.custom_type){\n            const referenceArray = ['missing', 'filling', 'radix', 'abrasion', 'crown', 'veneer', 'persistent', 'abscess', 'impaction', 'caries', 'fracture', 'mob', 'brigde', 'rg', 'exfolia', 'fistula'];\n            \n            const generateOptions = item => referenceArray.reduce((acc, key) => {\n                acc[key] = (item.options && item.options.split(', ').includes(key)) ? 1 : 0;\n                return acc;\n            }, {});\n            \n            const mapDetails = data => data.map(item => ({\n                idx: item.idx,\n                teeth_type: item.teeth_type,\n                location: item.location,\n                position: item.position,\n                options: generateOptions(item)\n            }));\n            \n            const generateRadioHtml = (data, customType) => {\n                const gridTemplateColumns = customType === 'Permanent Teeth'\n                    ? '1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr'\n                    : '1fr 1fr 1fr 1fr 1fr';\n            \n                return `\n                    <div style=\"display:grid;grid-template-columns: ${gridTemplateColumns};justify-content: end;\">\n                        ${data.reduce((html, item) => `${html}\n                            <label style=\"display: flex; flex-direction: column; align-items: center;\">\n                                <input type=\"radio\" name=\"custom_radio\" style=\"margin:0 !important;\" value=\"${item.position}\">\n                                ${item.position}\n                            </label>`, '')}\n                    </div>\n                `;\n            };\n            \n            const filterAndMapDetails = (detail, custom_type, location) => {\n                const filteredData = detail.filter(record => record.teeth_type === custom_type && record.location === location);\n                return mapDetails(filteredData);\n            };\n            \n            const transformDataToObjectArray = (data) => {\n                const result = [];\n                for (const [key, value] of Object.entries(data)) {\n                    const obj = { key, value };\n                    result.push(obj);\n                }\n                return result;\n            }\n            \n            const pt_ul_map = filterAndMapDetails(frm.doc.custom_dental_detail, frm.doc.custom_type, 'ul');\n            const pt_ur_map = filterAndMapDetails(frm.doc.custom_dental_detail, frm.doc.custom_type, 'ur');\n            const pt_ll_map = filterAndMapDetails(frm.doc.custom_dental_detail, frm.doc.custom_type, 'll');\n            const pt_lr_map = filterAndMapDetails(frm.doc.custom_dental_detail, frm.doc.custom_type, 'lr');\n            \n            let radio_html = `\n              <div style=\"display:grid;grid-gap:1rem;grid-template-columns: 1fr 1fr;margin-bottom: 1rem;\">\n                ${generateRadioHtml(pt_ul_map, frm.doc.custom_type)}\n                ${generateRadioHtml(pt_ur_map, frm.doc.custom_type)}\n              </div>\n              <div style=\"display:grid;grid-gap:1rem;grid-template-columns: 1fr 1fr;margin-bottom: 1rem;\">\n                ${generateRadioHtml(pt_ll_map, frm.doc.custom_type)}\n                ${generateRadioHtml(pt_lr_map, frm.doc.custom_type)}\n              </div>\n            `;\n            const data = pt_ul_map.concat(pt_ur_map, pt_ll_map, pt_lr_map);\n            $(frm.fields_dict.custom_permanent_teeth.wrapper).html(radio_html);\n            $(frm.fields_dict.custom_permanent_teeth.wrapper).find('input[type=radio][name=custom_radio]').on('change', function() {\n                unhide_field('custom_teeth_options');\n                const selected = data.find(item => item.position == $(this).val());\n                const selected_array = transformDataToObjectArray(selected.options);\n                const $wrapper = frm.get_field(\"custom_teeth_options\").$wrapper;\n                $wrapper.empty();\n                const options_wrapper = $(`<div class=\"options_wrapper\">`).appendTo($wrapper);\n                frm.options_multicheck = frappe.ui.form.make_control({\n        \t\t\tparent: options_wrapper,\n        \t\t\tdf: {\n        \t\t\t\tfieldname: \"options_multicheck\",\n        \t\t\t\tfieldtype: \"MultiCheck\",\n        \t\t\t\tselect_all: false,\n        \t\t\t\tcolumns: 8,\n        \t\t\t\tget_data: () => {\n        \t\t\t\t\treturn selected_array.map((option) => {\n        \t\t\t\t\t\treturn {\n        \t\t\t\t\t\t\tlabel: option.key.toLowerCase().replace(/\\b\\w/g, s => s.toUpperCase()),\n        \t\t\t\t\t\t\tvalue: option.key,\n        \t\t\t\t\t\t\tchecked: option.value,\n        \t\t\t\t\t\t};\n        \t\t\t\t\t});\n        \t\t\t\t},\n        \t\t\t},\n        \t\t\trender_input: true,\n        \t\t});\n        \t\tfrm.options_multicheck.refresh_input();\n        \t\tsetTimeout(()=>{\n        \t\t    frm.options_multicheck.$wrapper.find(`input[type=\"checkbox\"]`).each(function() {\n        \t\t        $(this).change(()=>{\n        \t\t            const multicheck_field = frm.options_multicheck.$wrapper.find('input[type=\"checkbox\"]');\n        \t\t            const selected_options = [];\n                            multicheck_field.each(function() {\n                                if ($(this).is(':checked')) {\n                                    selected_options.push($(this).attr('data-unit'));\n                                }\n                            });\n                            $.each(frm.doc.custom_dental_detail||[], (index, row)=>{\n                                if(row.position===selected.position){\n                                    frappe.model.set_value(row.doctype, row.name, 'options', selected_options.join(', '));\n                                }\n                            });\n        \t\t        });\n        \t\t    });\n        \t\t}, 100);\n            });\n\t    }\n\t},\n\tprepareStaticDental(frm){\n\t    const $wrapper = frm.get_field('custom_detail_html').$wrapper;\n\t    const detail_wrapper = $(`<div class=\"detail_wrapper\">`).appendTo($wrapper);\n\t    const data = frm.doc.custom_dental_detail.map((entry)=>{\n\t        return [entry.teeth_type, entry.position, entry.options]\n\t    });\n\t    const columns = [\n\t        {\n\t            name: 'teeth_type',\n\t            id: 'teeth_type',\n\t            content: `${__(\"Teeth Type\")}`,\n\t            editable: false,\n\t            sortable: false,\n\t            focusable: false,\n\t            dropdown: false,\n\t            align: 'left',\n\t            width: 300,\n\t        },\n\t        {\n\t            name: 'position',\n\t            id: 'position',\n\t            content: `${__(\"Position\")}`,\n\t            editable: false,\n\t            sortable: false,\n\t            focusable: false,\n\t            dropdown: false,\n\t            align: 'left',\n\t            width: 100,\n\t        },\n\t        {\n\t            name: 'options',\n\t            id: 'options',\n\t            content: `${__(\"Options\")}`,\n\t            editable: false,\n\t            sortable: false,\n\t            focusable: false,\n\t            dropdown: false,\n\t            align: 'left',\n\t            width: 800,\n\t        },\n        ];\n        if(!frm.static_dental_datatable){\n            const datatable_options = {\n                columns: columns,\n                data: data,\n                dynamicRowHeight: true,\n                inlineFilters: false,\n                layout: 'ratio',\n                serialNoColumn: false,\n                noDataMessage: __(\"No Data\"),\n                disableReorderColumn: true\n            }\n            frm.static_dental_datatable = new frappe.DataTable(\n                detail_wrapper.get(0),\n                datatable_options\n            );\n        } else {\n            frm.static_dental_datatable.refresh(data, columns);\n        }\n\t},\n});\nfrappe.ui.form.on('Drug Prescription', {\n\tcustom_compound_medicine_1_add(frm, cdt, cdn){\n\t    if(frm.doc.custom_compound_medicine_dosage_form){\n            frappe.model.set_value(cdt, cdn, \"dosage_form\", frm.doc.custom_compound_medicine_dosage_form);\n            frappe.model.set_value(cdt, cdn, \"dosage\", frm.doc.custom_dosage);\n            frappe.model.set_value(cdt, cdn, \"period\", frm.doc.custom_period);\n            frappe.model.set_value(cdt, cdn, \"custom_compound_qty\", frm.doc.custom_qty);\n\t    }\n\t}\n});\nfrappe.ui.form.on('Other Dental', {\n\tother(frm, cdt, cdn){\n\t    let row = frappe.get_doc(cdt, cdn);\n\t    if(frm.doc.custom_compound_medicine_dosage_form){\n\t        frappe.call({\n\t              method: 'frappe.client.get',\n\t              args: {\n\t                  doctype: 'Other Dental Option',\n\t                  name: child_row.other\n\t              },\n\t              callback: function (res){\n\t                  console.log('1')\n\t                  let dental_other = res.message;\n\t                  console.log('2')\n\t                  if(dental_other && dental_other.selective){\n\t                      console.log('3')\n\t                      let options = dental_other.selections.split('\\n');\n\t                      console.log('4')\n\t                      frm.fields_dict['custom_other'].grid.update_docfield_property('selective_value', 'options', options.join('\\n'));\n\t                      console.log('5')\n\t                      frm.fields_dict['custom_other'].grid.refresh();\n\t                  }\n\t              }\n            })\n\t    }\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-03-13 11:58:12.083708",
  "module": "KMS",
  "name": "Leave Application",
  "script": "frappe.ui.form.on('Leave Application', {\n\trefresh(frm) {\n\t\tfrm.set_query('leave_type', ()=>{\n\t\t    return {\n\t\t        filters: {\n\t\t            custom_category: frm.doc.custom_leave_category\n\t\t        }\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "KPI",
  "enabled": 1,
  "modified": "2024-03-20 14:19:47.015322",
  "module": "KMS",
  "name": "KPI",
  "script": "frappe.ui.form.on('KPI', {\n\tkpi_template: function(frm) {\n\t\tfrappe.db.get_doc('KPI Template', frm.doc.kpi_template).then(doc=>{\n\t\t    frm.doc.kpi_details_tab =[];\n\t\t    $.each(doc.kpi_template, (_i,e)=>{\n\t\t        let row = frm.add_child('kpi_details_tab');\n\t\t        row.key_result_area = e.key_result_area;\n\t\t        row.kpi = e.kpi;\n\t\t        row.weightage = e.weightage;\n\t\t        row.target = e.target;\n\t\t        row.unit_of_kpi = e.unit_of_kpi;\n\t\t        row.higher_is_better = e.higher_is_better;\n\t\t    });\n\t\t    frm.refresh_field(\"kpi_details_tab\");\n\t\t});\n\t}\n});\n\nfrappe.ui.form.on('KPI Details',  'actual', (frm, cdt, cdn) => {\n\tlet d = locals[cdt][cdn];\n\td.score_ = d.lower_is_better? d.target/d.actual*100 : d.actual/d.target*100;\n\td.final_score = d.lower_is_better? d.target/d.actual*d.weightage : d.actual/d.target*d.weightage;\n\tfrm.refresh_field(\"kpi_details_tab\");\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-03-20 14:56:54.440261",
  "module": "KMS",
  "name": "Shift Type",
  "script": "frappe.ui.form.on('Shift Type', {\n\tcustom_create_schedule(frm) {\n\t\tif(frm.doc.__islocal && frm.doc.start_time && frm.doc.end_time){\n\t\t    frm.doc.custom_weekly_assignment = [];\n\t\t    for(let i=0; i<6; i++) {\n\t\t        let row = frm.add_child(\"custom_weekly_assignment\");\n\t\t        const dayName = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\t\t        row.day = dayName[i];\n\t\t        row.from_time = frm.doc.start_time;\n\t\t        row.to_time = frm.doc.end_time;\n\t\t    }\n\t\t    frm.refresh_field('custom_weekly_assignment');\n    \t} else {\n    \t    frappe.msgprint('Please complete the entries of Start Time and End Time.');\n    \t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-03-24 22:45:17.609508",
  "module": "KMS",
  "name": "Customer",
  "script": "frappe.ui.form.on('Customer', {\n\tcustomer_type(frm) {\n\t\tif(frm.doc.customer_type==='Individual'){\n\t\t    frm.set_df_property('salutation', 'hidden', false);\n\t\t    frm.set_df_property('gender', 'hidden', false);\n\t\t} else {\n\t\t    frm.set_df_property('salutation', 'hidden', true);\n\t\t    frm.set_df_property('gender', 'hidden', true);\n\t\t}\n\t},\n\tvalidate(frm) {\n\t    if(frm.__islocal || !frm.doc.account_manager){\n\t        frm.set_value('account_manager', user);\n\t    }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Room Assignment",
  "enabled": 0,
  "modified": "2024-06-12 15:44:39.946292",
  "module": "KMS",
  "name": "Room Assignment",
  "script": "frappe.ui.form.on('Room Assignment', {\n\trefresh(frm) {\n\t    if(!frm.is_new()){\n    \t\tfrm.add_custom_button('Change Room', () => {\n                frappe.prompt({\n                    label: 'Healthcare Service Unit',\n                    fieldname: 'healthcare_service_unit',\n                    fieldtype: 'Link',\n                    options: 'Healthcare Service Unit',\n                    get_query: ()=>{\n                        return {\n                            filters: {\n                                is_group: 0\n                            }\n                        };\n                    }\n                }, (values) => {\n                    frappe.call({\n                        method: 'kms.room_assignment.change_room',\n                        args: {\n                            'name': frm.doc.name,\n                            'room': values.healthcare_service_unit\n                        },\n                        callback: function(r){\n                            if(r.message==='success'){\n                                frm.set_value('user', '');\n                                frm.refresh_field('user');\n                                frappe.msgprint('Changed room successfully.');\n                            }\n                        }\n                    });\n                });\n            });\n\t    }\n\t},\n\tsetup(frm) {\n\t    frm.set_query('healthcare_service_unit', ()=>{\n\t        return {\n\t            filters: {\n\t                is_group: 0\n\t            }\n\t        };\n\t    });\n\t},\n\tbefore_load(frm) {\n\t    if(frm.is_new()){\n\t        frm.set_value('user', frappe.session.user);\n\t    }\n\t}\n});",
  "view": "Form"
 }
]