[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Product Bundle",
  "enabled": 1,
  "modified": "2023-11-20 06:34:31.626339",
  "module": "KMS",
  "name": "Create Bundle",
  "script": "frappe.ui.form.on('Product Bundle', {\n\tsetup(frm) {\n\t\tfrm.set_df_property('custom_customer', 'read_only', 1);\n\t\tfrm.set_df_property('description', 'read_only', 1);\n\t\tfrm.set_df_property('new_item_code', 'read_only', 1);\n\t\tfrm.set_query(\"custom_price_list\", ()=>{\n\t\t    return {\n\t\t        filters: {\n\t\t            selling: true\n\t\t        }\n\t\t    }\n\t\t})\n\t\t/*Child Table filter*/\n\t\tfrm.set_query(\"item_code\", \"items\", () =>{\n\t\t    return {\n\t\t        filters: {\n\t\t            custom_product_bundle: true,\n\t\t            is_sales_item: true,\n\t\t            is_stock_item: false\n\t\t        }\n\t\t    };\n\t\t});\n\t},\n\t/*BUTTON CREATE*/\n\tcustom_create(frm) {\n        frappe.prompt([\n            {\n                label: 'Bundle Name',\n                fieldname: 'bundle_name',\n                fieldtype: 'Data',\n                reqd: true\n            },\n            {\n                label: 'Customer',\n                fieldname: 'customer',\n                fieldtype: 'Link',\n                reqd: true,\n                options:\"Customer\",\n                get_query: () => {\n                    return {\n                        filters: {\"customer_type\": \"Company\"}\n                    };\n                }\n            },\n            {\n                label: \"Price List\",\n                fieldname: \"price_list\",\n                fieldtype: \"Link\",\n                reqd: true,\n                options: \"Price List\",\n                get_query: () => {\n                    return {\n                        filters: {selling: true}\n                    };\n                }\n            },\n            {\n                label: \"Medical Check Up\",\n                fieldname: \"is_mcu\",\n                fieldtype: \"Check\"\n            },\n\t        {\n\t            label: \"From Service Package\",\n\t            fieldname: \"copy_from\",\n\t            fieldtype: \"Link\",\n\t            options: \"Product Bundle\",\n\t            get_query: () => {\n\t                return {\n\t                    filters: {custom_enable: true}\n\t                };\n\t            }\n\t        }\n        ], (values) => {\n            /*AUTOMATICALLY CREATE ITEM*/\n            frappe.db.insert({\n                doctype: \"Item\",\n                item_name: values.bundle_name,\n                item_group: \"Exam Course\",\n                stock_uom: \"Unit\",\n                is_stock_item: false,\n                include_item_in_manufacturing: false,\n                is_purchase_item: false,\n                is_sales_item: true,\n                custom_product_bundle_customer: values.customer\n            }). then(doc=>{\n                /*SET PARENT VALUES*/\n                frm.set_value({\n                    new_item_code: doc.name,\n                    description: doc.item_name,\n                    custom_customer: values.customer,\n                    custom_price_list: values.price_list\n                });\n                /*SET MANDATORY ITEMS IF MCU*/\n                if (!values.copy_from) {\n                    if(values.is_mcu){\n                        /*fetch only mandatory item*/\n                        frappe.call({\n                            method: \"kms.api.get_mcu\",\n                            args: {price_list: values.price_list}\n                        }).then((r)=>{\n                            frm.doc.items = [];\n                            let total = 0;\n                            $.each(r.message, function(_i, e){\n                                let item = frm.add_child(\"items\");\n            \t                item.item_code = e.item_code;\n            \t                item.qty = 1;\n            \t                item.description = e.item_name;\n            \t                item.rate = e.price_list_rate;\n            \t                total += e.price_list_rate;\n            \t                frm.set_value(\"custom_rate\", total);\n                                frm.refresh_field(\"custom_rate\");\n                            });\n                            refresh_field(\"items\");\n                        });\n                    }\n                } else {\n                    /*fetch from other product bundle*/\n        \t        frappe.db.get_doc(\"Product Bundle\", values.copy_from).then(doc=>{\n        \t            frm.doc.items =[];\n        \t            let total = 0;\n        \t            $.each(doc.items, function(_i, e){\n        \t                let item = frm.add_child(\"items\");\n        \t                item.item_code = e.item_code;\n        \t                item.qty = e.qty;\n        \t                item.description = e.description;\n        \t                item.rate = e.rate;\n        \t                total += e.rate;\n        \t                frm.set_value(\"custom_rate\", total);\n        \t            });\n        \t            refresh_field(\"custom_rate\");\n        \t            refresh_field(\"items\");\n        \t        });\n                }\n            });\n        });\n\t},\n\tafter_save(frm) {\n        let filters = {};\n        filters.item_code = frm.doc.new_item_code;\n        filters.price_list = frm.doc.custom_price_list;\n        filters.customer = frm.doc.custom_customer;\n        filters.price_list_rate = frm.doc.custom_rate;\n        frappe.call({\n            method:'kms.api.upsert_item_price',\n            args: {\n                item_code: frm.doc.new_item_code, \n                price_list: frm.doc.custom_price_list,\n                customer: frm.doc.custom_customer,\n                price_list_rate: frm.doc.custom_rate\n            }\n        }).then((r)=>{\n            console.log(r);\n        });\n\t}\n});\n\nfrappe.ui.form.on('Product Bundle Item', {\n\titem_code(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    frappe.model.set_value(d.doctype, d.name, \"qty\", 1);\n\t    frappe.db.get_doc(\n\t        'Item Price',\n\t        null,\n\t        {\n\t            item_code: d.item_code,\n\t            selling: true,\n\t            price_list: frm.doc.custom_price_list\n\t        }).then(r=>{\n\t            frappe.model.set_value(d.doctype, d.name, 'rate', r.price_list_rate);\n\t        });\n\t    frm.refresh_field(\"items\");\n\t},\n\trate(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n\titems_add(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n\titems_remove(frm, cdt, cdn) {\n\t    let d = locals[cdt][cdn];\n\t    let total = 0;\n\t    frm.doc.items.forEach((d)=>{\n\t        total += d.rate ? d.rate : 0;\n\t    });\n\t    frm.set_value(\"custom_rate\", total);\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-01-01 18:55:49.880512",
  "module": "KMS",
  "name": "Quotation Item Filter",
  "script": "frappe.ui.form.on('Quotation', {\n    quotation_to(frm) {\n        frm.doc.party_name = '';\n        if(frm.doc.quotation_to === 'Customer'){\n            frm.set_query('party_name', () => {\n                return {\n                    filters: {customer_type: 'Company'}\n                };\n            });\n        }\n    },\n    setup(frm) {\n        if(frm.doc.__islocal){\n            frm.doc.items = [];\n            frm.set_df_property('items', 'hidden', 1);\n        }\n    },\n\trefresh(frm) {\n\t    frm.trigger('create_package_items_tab');\n\n\t    frm.set_query(\"item_code\", \"items\", function(doc, cdt, cdn){\n\t        let d = locals[cdt][cdn];\n\t        return {\n\t            filters: {\n\t                is_sales_item : true,\n\t                disabled: false,\n\t                is_purchase_item: false\n\t            }\n\t        };\n\t    });\n\t    \n\t    if(frm.doc.docstatus===0 && frm.doc.quotation_to === 'Customer'){\n\t        if(frm.doc.party_name){\n        \t    /***Custom button to get available product bundle within a Customer before save***/\n    \t        frm.add_custom_button(\n    \t            __('Product Bundle'),\n    \t            () => {\n    \t                frappe.db.get_list(\n    \t                    'Product Bundle',\n    \t                    {\n    \t                        fields: ['new_item_code', 'description', 'custom_rate'],\n    \t                        filters: {\n    \t                            custom_customer: frm.doc.party_name,\n    \t                            custom_enable: true\n    \t                        }\n    \t                    }). then(records => {\n    \t                        frm.doc.items =[];\n    \t                        $.each(records, (_i, e)=>{\n    \t                            let item = frm.add_child(\"items\");\n    \t                            item.item_code = e.new_item_code;\n    \t                            item.item_name = e.description;\n    \t                            item.description = e.description;\n    \t                            item.qty = 1;\n    \t                            item.uom = 'Unit';\n    \t                            item.rate = e.custom_rate;\n    \t                        });\n    \t                        refresh_field(\"items\");\n    \t                    });\n    \t            },\n    \t            __(\"Get Items From\"), \n    \t            \"btn-default\"\n    \t        );\n\t        } else {\n\t            /***Restrict to company customer only***/\n\t            frm.set_query('party_name', () => {\n\t                return {\n\t                    filters: {\n\t                        customer_type: 'Company'\n\t                    }\n\t                };\n\t            });\n\t        }\n\t    }\n\t    \n\t    /***Custom button to create product bundle within a Lead before save***/\n\t    if (frm.doc.docstatus===0 && frm.doc.party_name && (frm.doc.quotation_to === 'Customer' || frm.doc.quotation_to === 'Lead')){\n\t        frm.add_custom_button(\n\t            __('New Product Bundle'),\n\t            () => {\n\t                //ambil data item\n\t                frappe.call({\n\t                    method: \"kms.api.get_items_to_create_bundle\"\n\t                }).then((r)=>{\n\t                    //let group = Array.from(new Set(r.message.map((item)=>item.item_group))).join('\\n');\n\t                    let lv1 = r.message.map((obj)=> obj.lv1).filter((value, index, self) => self.indexOf(value)===index);\n\t                    let fields = [\n\t                        {\n\t                            fieldname: 'name',\n\t                            fieldtype: 'Data',\n\t                            label: __('Package Name'),\n\t                            reqd: 1\n\t                        },\n\t                        {\n\t                            fieldname: 'price_list',\n\t                            fieldtype: 'Link',\n\t                            options: 'Price List',\n\t                            label: __('Price List'),\n\t                            reqd: 1,\n\t                            hidden: 1,\n\t                            default: frm.doc.selling_price_list,\n\t                            get_query: () => {\n\t                                return {\n\t                                    filters: {selling: true}\n\t                                };\n\t                            }\n\t                        },\n\t                        {\n\t                            fieldtype: 'Section Break',\n\t                            label: __('Package Items')\n\t                        },\n\t                        { \n\t                            fieldname: 'lv1',\n\t                            fieldtype: 'Select',\n\t                            options: lv1,\n\t                            label: __('Item Group'),\n\t                            //default: r.message[0].item_group,\n\t                            reqd: 1\n\t                        },\n\t                    ];\n\t                    $.each(r.message, (_i, e) => {\n\t                        fields.push({\n\t                            fieldtype: 'Check',\n\t                            label: e.item_name,\n\t                            fieldname: `${e.name}-----${e.item_name}`,\n\t                            depends_on: \"eval:doc.group=='\"+ e.item_group + \"'\"\n\t                        });\n\t                    });\n\t                    let d = new frappe.ui.Dialog({\n\t                        title: __('Create Product Bundle'),\n\t                        size: 'extra-large',\n\t                        fields: fields,\n\t                        primary_action_label: __('Create'),\n\t                        primary_action: (values) => {\n\t                            console.log('values', values);\n\t                            const item_values = Object.keys(values).filter(key => values[key] === 1);\n\t                            const item_rec = item_values.map(item => (\n\t                                { \n\t                                    item_code: item.slice(0, item.indexOf('-----')),\n\t                                    qty: 1, \n\t                                    description: item.slice(item.indexOf('-----')+5),\n\t                                    rate: 0,\n\t                                    uom: \"\",\n\t                                    parent: \"\"\n\t                                }));\n\t                            frappe.call({\n\t                                method: 'kms.api.create_product_bundle_from_quotation',\n\t                                freeze: true,\n\t                                args: {\n\t                                    items: item_rec,\n\t                                    name: values.name,\n\t                                    price_list: values.price_list,\n\t                                    party_name: frm.doc.party_name,\n\t                                    quotation_to: frm.doc.quotation_to\n\t                                },\n\t                                callback: (r) => {\n\t                                    if(r.message) {\n\t                                        console.log('r.message', r.message);\n\t                                        let item = frm.add_child(\"items\");\n\t                                        item.item_code = r.message.name;\n\t                                        item.item_name = r.message.description;\n\t                                        item.description = r.message.description;\n\t                                        item.qty = 1;\n\t                                        item.uom = 'Unit';\n\t                                        item.rate = r.message.custom_rate;\n\t                                        frm.refresh_field(\"items\");\n\t                                    }\n\t                                }\n\t                            });\n\t                            d.hide();\n\t                        }\n\t                    });\n\t                    d.show();\n\t                });\n\t            },\n\t            __('Get Items From'),\n\t            'btn_default'\n\t        );\n\t    }\n\t    \n\t    /***Custom button to create Blanket Order after quotation is submitted***/\n\t    if(frm.doc.docstatus===1 && ![\"Lost\", \"Ordered\"].includes(frm.doc.status)){\n\t        frm.add_custom_button(\n\t            __('Blanket Order'),\n\t            ()=> {\n\t                frappe.new_doc(\n\t                    'Blanket Order',\n\t                    {\n\t                        blanket_order_type: 'Selling',\n\t                        customer: frm.doc.party_name,\n\t                        custom_quotation: frm.doc.name\n\t                    },\n\t                    doc => {\n\t                        let today = frappe.datetime.get_today();\n\t                        doc.from_date = today;\n\t                        doc.to_date = frappe.datetime.add_months(today, 1);\n\t                        doc.items = [];\n\t                        $.each(frm.doc.items, (_i,e)=>{\n    \t                        let row = frappe.model.add_child(doc, \"items\");\n    \t                        row.item_code = e.item_code;\n    \t                        row.rate = e.rate;\n    \t                        row.item_name = e.item_name;\n    \t                        row.qty = e.qty;\n\t                        });\n\t                        refresh_field(\"items\");\n\t                    });\n\t            },\n\t            __('Create')\n\t        );\n\t    }\n\t},\n\t\n\tcreate_package_items_tab(frm) {\n\t    frappe.call({\n\t        method: 'kms.api.get_quotation_item',\n\t        freeze: true,\n\t        args: {quotation_no: frm.doc.name},\n\t        callback: (r) => {\n\t            if(r.message) {\n\t                let prev_idx = '';\n\t                let prev_item_group = '';\n\t                \n            \t    cur_frm.fields_dict.custom_html_field.$wrapper.empty();\n            \t    cur_frm.fields_dict.custom_html_field.$wrapper.append(`<div class=\"grid-field\" id=\"pigf\"></div>`);\n            \t    $('#pigf').append(`<div class=\"form-grid-container\" id=\"pigc\"></div>`);\n            \t    $('#pigc').append(`<div class=\"form-grid\" id=\"pig\"></div>`);\n            \t    $('#pig').append(`<div class=\"grid-heading-row\" id=\"pighr\"></div)`);\n            \t    $('#pighr').append(`<div class=\"grid-row\" id=\"pigr\"></div>`);\n            \t    $('#pigr').append(`<div class=\"data-row row\" id=\"pidrr\"></div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-4\" id=\"picol1\"></div>`);\n            \t    $('#picol1').append(`<div class=\"static-area\" id=picol1s>Item Code</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-1 text-right\" id=\"picol2\"></div>`);\n            \t    $('#picol2').append(`<div class=\"static-area\" id=picol2s>Qty</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-2 text-right\" id=\"picol3\"></div>`);\n            \t    $('#picol3').append(`<div class=\"static-area\" id=picol5s>Rate</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-2 text-right\" id=\"picol4\"></div>`);\n            \t    $('#picol4').append(`<div class=\"static-area\" id=picol4s>Amount</div>`);\n            \t    $('#pidrr').append(`<div class=\"col grid-static-col col-xs-3 text-right\" id=\"picol5\"></div>`);\n            \t    $('#picol5').append(`<div class=\"static-area\" id=picol5s>Total</div>`);\n            \t    \n            \t    $('#pig').append(`<div class=\"grid-body\" id=\"pigb\"></div)`);\n            \t    $('#pigb').append(`<div class=\"rows\" id=\"pir\"></div)`);\n            \t    \n\t                $.each(r.message, (_i, e) => {\n            \t        $('#pir').append(`<div class=\"grid-row\" data-idx=\"${_i}\" id=\"pigr${_i}\"></div>`);\n            \t        $(`#pigr${_i}`).append(`<div class=\"data-row row\" id=\"pidr${_i}\"></div>`);\n\t                    if(prev_idx != e.idx){\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-4 bold grid-heading-row\" id=\"pigscidx1${_i}\"></div>`);\n                \t        $(`#pigscidx1${_i}`).append(`<a href=\"/app/product-bundle/${e.name}\">&rsaquo; &rsaquo; ${e.bundle_name}</a>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-1 bold grid-heading-row\" id=\"pigscidx2${_i}\"></div>`);\n                \t        $(`#pigscidx2${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_qty, {\"fieldtype\":\"Int\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold grid-heading-row\" id=\"pigscidx3${_i}\"></div>`);\n                \t        $(`#pigscidx3${_i}`).append(`<div style=\"text-align: right\">${frappe.format(0, {\"fieldtype\":\"Currency\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold grid-heading-row\" id=\"pigscidx4${_i}\"></div>`);\n                \t        $(`#pigscidx4${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-3 bold grid-heading-row\" id=\"pigscidx5${_i}\"></div>`);\n                \t        $(`#pigscidx5${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.quotation_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n\n                \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-12 bold grid-heading-row\" id=\"pigscig2${_i}\"></div>`);\n                \t        $(`#pigscig2${_i}`).append(`<a href=\"/app/item-group/${e.item_group}\">&rsaquo; ${e.item_group}</a>`);\n\t                    } else {\n\t                        if(prev_item_group != e.item_group){\n                    \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-12 bold grid-heading-row\" id=\"pigscig2${_i}\"></div>`);\n                    \t        $(`#pigscig2${_i}`).append(`<a href=\"/app/item-group/${e.item_group}\">&rsaquo; ${e.item_group}</a>`);\n\t                        }\n\t                    }\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-4 bold\" id=\"pigsc1${_i}\"></div>`);\n            \t        $(`#pigsc1${_i}`).append(`<a href=\"/app/item/${e.item_code}\">${e.item_name}</a>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-1 bold\" id=\"pigsc2${_i}\"></div>`);\n            \t        $(`#pigsc2${_i}`).append(`<div style=\"text-align: right\">1</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold\" id=\"pigsc3${_i}\"></div>`);\n            \t        $(`#pigsc3${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_cogs, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-2 bold\" id=\"pigsc4${_i}\"></div>`);\n            \t        $(`#pigsc4${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        $(`#pidr${_i}`).append(`<div class=\"col grid-static-col col-xs-3 bold\" id=\"pigsc5${_i}\"></div>`);\n            \t        $(`#pigsc5${_i}`).append(`<div style=\"text-align: right\">${frappe.format(e.item_rate, {\"fieldtype\":\"Currency\"})}</div>`);\n            \t        prev_idx = e.idx;\n            \t        prev_item_group = e.item_group;\n\t                });\n\t            }\n\t        }\n\t    });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-11-28 19:57:50.407924",
  "module": "KMS",
  "name": "Sales Order Item filter",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Sales Order Item', {\n\tonload(frm) {\n\t\tfrm.set_query(\"item_code\", function(){\n\t\t    return {\n\t\t        \"filters\": {\n\t\t            \"is_sales_item\" : true\n\t\t        }\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-11-11 19:51:42.945212",
  "module": "KMS",
  "name": "Item",
  "script": "frappe.ui.form.on(\"Item\", \"onload\", function(frm) {\n    frm.set_query(\"item_code\", function() {\n        return {\n            \"filters\": {\n                \"is_group\": false\n            }\n        };\n    });\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Product Bundle Settings",
  "enabled": 1,
  "modified": "2023-12-01 14:01:06.520097",
  "module": "KMS",
  "name": "Product Bundle Settings",
  "script": "frappe.ui.form.on('Product Bundle Settings', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"item_group\", \"item_group\", function (doc, cdt, cdn){\n\t\t    let d = locals[cdt][cdn];\n\t\t    return {\n\t\t        filters: {\n\t\t            is_group : false\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_item_group', ()=> {\n\t\t    return {\n\t\t        filters: {is_group: false}\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_cogs', ()=> {\n\t\t    return {\n\t\t        filters: {buying: true}\n\t\t    };\n\t\t});\n\t\tfrm.set_query('default_price_list', ()=> {\n\t\t    return {\n\t\t        filters: {selling: true}\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Blanket Order",
  "enabled": 1,
  "modified": "2023-11-22 06:58:44.357130",
  "module": "KMS",
  "name": "Blanket Order",
  "script": "frappe.ui.form.on('Blanket Order', {\n\tonload(frm) {\n\t\tfrm.set_query(\"customer\", ()=>{\n\t\t    return {\n\t\t        filters: {\n\t\t            customer_type: \"Company\"\n\t\t        }\n\t\t    };\n\t\t});\n\t},\n\ton_submit(frm) {\n\t    frappe.call(\n\t        'kms.api.update_quo_status',\n\t        {name: frm.doc.custom_quotation}\n        );\n\t    /*frappe.db.set_value('Quotation', frm.doc.custom_quotation, 'status', 'Ordered')\n\t    .then(doc =>{\n\t        console.log(doc);\n\t    });*/\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2023-12-06 14:20:24.886088",
  "module": "KMS",
  "name": "Clinical Procedure",
  "script": "frappe.ui.form.on('Clinical Procedure', {\n\tprocedure_template: function(frm) {\n\t\tif (frm.doc.procedure_template) {\n\t\t\tfrappe.call({\n\t\t\t\t'method': 'frappe.client.get',\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: 'Clinical Procedure Template',\n\t\t\t\t\tname: frm.doc.procedure_template\n\t\t\t\t},\n\t\t\t\tcallback: function (data) {\n\t\t\t\t\tfrm.set_value('medical_department', data.message.medical_department);\n\t\t\t\t\tfrm.set_value('consume_stock', data.message.consume_stock);\n\t\t\t\t\tfrm.events.set_warehouse(frm);\n\t\t\t\t\tfrm.events.set_procedure_consumables(frm);\n\t\t\t\t\t\n        \t\t\tfrappe.call({\n        \t\t\t\t\"method\": \"healthcare.healthcare.utils.get_medical_codes\",\n        \t\t\t\targs: {\n        \t\t\t\t\ttemplate_dt: \"Clinical Procedure Template\",\n        \t\t\t\t\ttemplate_dn: frm.doc.procedure_template,\n        \t\t\t\t},\n        \t\t\t\tcallback: function(r) {\n        \t\t\t\t\tif (!r.exc && r.message) {\n        \t\t\t\t\t\tfrm.doc.codification_table = []\n        \t\t\t\t\t\t$.each(r.message, function(k, val) {\n        \t\t\t\t\t\t\tif (val.medical_code) {\n        \t\t\t\t\t\t\t\tvar child = cur_frm.add_child(\"codification_table\");\n        \t\t\t\t\t\t\t\tchild.medical_code = val.medical_code\n        \t\t\t\t\t\t\t\tchild.medical_code_standard = val.medical_code_standard\n        \t\t\t\t\t\t\t\tchild.code = val.code\n        \t\t\t\t\t\t\t\tchild.description = val.description\n        \t\t\t\t\t\t\t\tchild.system = val.system\n        \t\t\t\t\t\t\t}\n        \t\t\t\t\t\t});\n        \t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n        \t\t\t\t\t} else {\n        \t\t\t\t\t\tfrm.clear_table(\"codification_table\")\n        \t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n        \t\t\t\t\t}\n        \t\t\t\t}\n        \t\t\t})\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrm.clear_table(\"codification_table\")\n\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t}\n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2023-12-27 16:47:23.285328",
  "module": "KMS",
  "name": "Lab Test",
  "script": "frappe.ui.form.on('Lab Test', {\n\ttemplate: function(frm) {\n\t\tif (frm.doc.template) {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"healthcare.healthcare.utils.get_medical_codes\",\n\t\t\t\targs: {\n\t\t\t\t\ttemplate_dt: \"Lab Test Template\",\n\t\t\t\t\ttemplate_dn: frm.doc.template,\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc && r.message) {\n\t\t\t\t\t\tfrm.doc.codification_table = [];\n\t\t\t\t\t\t$.each(r.message, function(k, val) {\n\t\t\t\t\t\t\tif (val.medical_code) {\n\t\t\t\t\t\t\t\tlet child = cur_frm.add_child(\"codification_table\");\n\t\t\t\t\t\t\t\tchild.medical_code = val.medical_code;\n\t\t\t\t\t\t\t\tchild.medical_code_standard = val.medical_code_standard;\n\t\t\t\t\t\t\t\tchild.code = val.code;\n\t\t\t\t\t\t\t\tchild.description = val.description;\n\t\t\t\t\t\t\t\tchild.system = val.system;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t\t\t\t\tfrappe.db.get_doc('Lab Test Template', frm.doc.template).then(doc=>{\n\t\t\t\t\t\t    //Get Worksheet & Result Legend Print \n\t\t\t\t\t\t    frm.doc.worksheet_instructions = doc.worksheet_instructions;\n\t\t\t\t\t\t    frm.doc.result_legend = doc.result_legend;\n\t\t\t\t\t\t    frm.doc.legend_print_position = doc.legend_print_position;\n\t\t\t\t\t\t    frm.refresh_field(\"worksheet_instructions\");\n\t\t\t\t\t\t    frm.refresh_field(\"result_legend\");\n\t\t\t\t\t\t    frm.refresh_field(\"legend_print_position\");\n    \t\t\t\t\t\t//Get Stock Consumption\n    \t\t\t\t\t\t//Create and Submit Stock Entry\n\t\t\t\t\t\t    /*console.log(doc);\n\t\t\t\t\t\t    frm.doc.custom_consumables = [];\n\t\t\t\t\t\t    $.each(doc.custom_consumables, (_i, e) => {\n\t\t\t\t\t\t        let cons = cur_frm.add_child(\"custom_consumables\");\n\t\t\t\t\t\t        cons.item_code = e.item_code;\n\t\t\t\t\t\t        cons.qty = e.qty;\n\t\t\t\t\t\t        cons.uom = e.uom;\n\t\t\t\t\t\t        cons.stock_uom = e.stock_uom;\n\t\t\t\t\t\t        cons.invoice_separately_as_consumable = e.invoice_separately_as_consumable;\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t    frm.refresh_field(\"custom_consumables\");*/\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfrm.clear_table(\"codification_table\");\n\t\t\t\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfrm.clear_table(\"codification_table\");\n\t\t\tfrm.refresh_field(\"codification_table\");\n\t\t}\n\t},\n\tsetup(frm){\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        }\n\t    })\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test Template",
  "enabled": 1,
  "modified": "2023-12-26 10:27:44.888702",
  "module": "KMS",
  "name": "Lab Test Template",
  "script": "frappe.ui.form.on('Lab Test Template', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test Batch",
  "enabled": 1,
  "modified": "2023-12-27 16:51:04.738862",
  "module": "KMS",
  "name": "Lab Test Batch",
  "script": "frappe.ui.form.on('Lab Test Batch', {\n\trefresh(frm) {\n\t\tif(frm.doc.docstatus === 0){\n\t\t    frm.add_custom_button(\n\t\t        __('Get Sample Collection'),\n\t\t        () => {\n\t\t            let sample;\n\t\t            frappe.db.get_value('Lab Test Template', frm.doc.test_template, 'sample').then(r=>{sample = r.message.sample});\n\t\t            new frappe.ui.form.MultiSelectDialog({\n\t\t                doctype: 'Sample Collection',\n\t\t                target: frm,\n\t\t                date_field: 'collected_time',\n\t\t                add_filters_group: 1,\n\t\t                setters: {\n\t\t                    patient: null,\n\t\t                    patient_sex: null\n\t\t                },\n\t\t                get_query() {\n\t\t                    return {\n\t\t                        filters: {\n\t\t                            company: frm.doc.company,\n\t\t                            sample: sample,\n\t\t                            custom_service_unit: frm.doc.service_unit,\n\t\t                            docstatus: 1,\n\t\t                            custom_lab_test_batch: ''\n\t\t                        }\n\t\t                    };\n\t\t                },\n\t\t                action(selections){\n\t\t                    frappe.call({\n\t\t                        method: 'set_lab_test_run_on_samples',\n\t\t                        doc: frm.doc,\n\t\t                        args: selections\n\t\t                    });\n\t\t                    cur_dialog.hide();\n\t\t                }\n\t\t            });\n\t\t        },\n\t\t        __('Actions'),\n\t\t        'btn-default'\n            );\n\t\t}\n\t},\n\tsetup(frm){\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        };\n\t    });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sample Collection",
  "enabled": 1,
  "modified": "2023-12-27 16:48:39.416151",
  "module": "KMS",
  "name": "Sample Collection",
  "script": "frappe.ui.form.on('Sample Collection', {\n\tsetup(frm){\n\t    frm.set_query('custom_service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        }\n\t    })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Radiology",
  "enabled": 1,
  "modified": "2024-02-01 20:59:41.766994",
  "module": "KMS",
  "name": "Radiology",
  "script": "frappe.ui.form.on('Radiology', {\n\ttemplate: (frm) => {\n\t\tif(frm.doc.template) {\n\t\t    frappe.db.get_doc('Radiology Result Template', frm.doc.template).then(doc=>{\n\t\t        $.each(doc.items, (key, value) => {\n\t\t            let result = cur_frm.add_child('result');\n\t\t            result.result_line = value.result_text;\n\t\t            result.normal_value = value.normal_value;\n\t\t            result.result_check = value.normal_value;\n\t\t            result.item_code = doc.item_code;\n\t\t            result.result_options = value.result_select;\n\t\t            frappe.db.get_value('Item', doc.item_code, 'item_name').then(i => {result.item_name =i.message.item_name});\n\t\t        });\n\t\t        frm.refresh_field('result');\n\t\t        $.each(doc.items, (key, value) => {\n\t\t            frm.fields_dict.result.grid.grid_rows[key].docfields[3].options = value.result_select.split(\"\\n\");\n                    console.log(frm.fields_dict.result.grid);\n\t\t        });\n\t\t    });\n\t\t}\n\t},\n\tappointment: (frm) => {\n        frm.add_fetch('appointment', 'patient', 'patient');\n\t},\n\tqueue_pooling: (frm) => {\n\t    frm.add_fetch('queue_pooling', 'appointment', 'appointment');\n\t    frm.add_fetch('queue_pooling', 'patient', 'patient');\n\t},\n\trefresh: (frm) => {\n\t  frm.set_query('appointment', () =>{\n\t      return {\n\t          filters: {\n\t              status: ['in', ['Open', 'Checked In']]\n\t          }\n\t      };\n\t  });\n\t  frm.set_query('queue_pooling', () =>{\n\t      return {\n\t          filters: {\n\t              status: ['in', ['Queued', 'Ongoing']]\n\t          }\n\t      };\n\t  });\n\t  frm.set_query('service_unit', () => {\n\t      return {\n\t          filters: {\n\t              service_unit_type: 'Radiology'\n\t          }\n\t      };\n\t  });\n\t},\n\tsetup(frm) {\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                is_group: 0,\n\t                company: frm.doc.company\n\t            }\n\t        };\n\t    });\n\t    if(frm.doc.result&&frm.doc.docstatus===0){\n\t        frm.refresh_field('result');\n\t        $.each(frm.doc.result, (key, value) => {\n\t            frm.fields_dict.result.grid.grid_rows[key].docfields[3].options = value.result_options;\n\t        });\n\t    }\n\t}\n});\n\nfrappe.ui.form.on('Radiology Result', {\n\tresult_check(frm, cdt, cdn) {\n\t\tlet d = locals[cdt][cdn];\n\t\tlet current_row = frm.fields_dict.result.grid.grid_rows_by_docname[d.name];\n\t\tcurrent_row.toggle_editable('result_text', (d.result_check !== d.normal_value));\n\t\tcurrent_row.toggle_reqd('result_text', (d.result_check !== d.normal_value));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-01-08 20:40:29.663666",
  "module": "KMS",
  "name": "Patient",
  "script": "frappe.ui.form.on('Patient', {\n\tsetup(frm) {\n\t\tfrm.set_query('customer_group', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            is_group: 0,\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('territory', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            is_group: 0,\n\t\t        }\n\t\t    };\n\t\t});\n\t\tfrm.set_query('custom_company', () => {\n\t\t    return{\n\t\t        filters:{\n\t\t            customer_type: 'Company',\n\t\t        }\n\t\t    };\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Appointment",
  "enabled": 1,
  "modified": "2024-02-08 11:55:57.384730",
  "module": null,
  "name": "Patient Appointment",
  "script": "frappe.ui.form.on('Patient Appointment', {\n\tcustom_type(frm) {\n\t\tif(frm.doc.custom_type==='Insurance') {\n\t\t    let filters = [];\n\t\t    frappe.db.get_doc('Patient', frm.doc.patient).then(patient=>{\n\t\t        $.each(patient.custom_insurance_table, (key, value)=>{\n\t\t            filters.push(value.provider);\n\t\t        });\n\t\t    });\n\t\t    frm.set_query('custom_provider', ()=>{\n\t\t        return{\n\t\t            filters:{'health_insurance_name': ['in', filters]}\n\t\t        };\n\t\t    });\n\t\t}\n\t},\n\tcustom_provider(frm) {\n\t    frappe.db.get_doc('Patient', frm.doc.patient).then(patient=>{\n\t        $.each(patient.custom_insurance_table, (key, value)=>{\n\t            if(value.provider===frm.doc.custom_provider){\n\t                frm.doc.custom_number = value.number;\n\t                frm.doc.custom_valid_to = value.valid_to;\n\t            }\n\t        });\n\t    });\n\t},\n\trefresh(frm) {\n\t    frm.remove_custom_button('Vital Signs', 'Create');\n\t    frm.remove_custom_button('Patient Encounter', 'Create');\n\t    frm.set_query('service_unit', () => {\n\t        return{\n\t            filters: {\n\t                service_unit_type: frm.doc.appointment_type,\n\t                custom_branch: frm.doc.custom_branch\n\t            }\n\t        };\n\t    });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Queue Pooling",
  "enabled": 1,
  "modified": "2024-02-09 07:05:17.158218",
  "module": "KMS",
  "name": "Queue Pooling",
  "script": "frappe.ui.form.on('Queue Pooling', {\n\trefresh(frm) {\n\t\tif(frm.doc.status === 'Queued'&& !frm.doc.encounter){\n\t\t    const now = new Date();\n\t\t    const hour = now.getHours();\n\t\t    const minute = now.getMinutes();\n\t\t    const second = now.getSeconds();\n\t\t    const formattedTime = hour + \":\" + minute + \":\" + second;\n\t\t    frm.add_custom_button(\n\t\t        __('Cancel'),\n\t\t        ()=> {\n\t\t            frappe.prompt([\n\t\t                {\n\t\t                    label: 'Cancel Reason',\n\t\t                    fieldname: 'cancel_reason',\n\t\t                    fieldtype: 'Data',\n\t\t                    reqd: true\n\t\t                }], (values)=>{\n        \t\t            frappe.db.set_value('Queue Pooling', frm.doc.name, {\n        \t\t                status: 'Cancelled',\n        \t\t                cancelled_time: formattedTime,\n        \t\t                cancel_reason: values.cancel_reason\n        \t\t            });\n\t\t                });\n\t\t        });\n            frm.add_custom_button(\n                __('Create Encounter'), \n                ()=>{\n                    frappe.new_doc('Patient Encounter',{\n                        appointment: frm.doc.appointment,\n                        patient: frm.doc.patient,\n                        company: frm.doc.company,\n                        custom_queue_pooling: frm.doc.name,\n                        custom_service_unit: frm.doc.service_unit\n                    });\n                }\n            );\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-02-09 07:02:50.586098",
  "module": "KMS",
  "name": "Patient Encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\n\trefresh(frm) {\n\t\tif(frm.is_new()){\n\t\t    frm.add_custom_button(\n\t\t        __('Get from Queue'),\n\t\t        ()=>{\n                    const d = new frappe.ui.form.MultiSelectDialog({\n                        doctype: 'Queue Pooling',\n                        target: frm,\n                        setters: {patient: null, appointment:null},\n                        get_query() {\n                            return {\n                                filters: {\n                                    company: frm.doc.company,\n                                    branch: frm.doc.custom_branch,\n                                    service_unit: frm.doc.custom_service_unit,\n                                    status: 'Queued'\n                                }\n                            };\n                        },\n                        action(selections){\n                            frappe.db.get_doc('Queue Pooling', selections[0]).then(doc=>{\n                                frm.doc.custom_queue_pooling = doc.name;\n                                frm.doc.appointment = doc.appointment;\n                                frm.doc.patient = doc.patient;\n                                frm.doc.appointment_type = doc.appointment_type;\n                                frappe.db.get_doc('Patient Appoinment', doc.appoinment).then(appointment=>{\n                                    frm.doc.patient_name = appointment.patient_name;\n                                    frm.doc.patient_sex = appointment.patient_sex;\n                                    frm.doc.patient_age = appointment.patient_age;\n                                    refresh_field('patient_name');\n                                    refresh_field('patient_sex');\n                                    refresh_field('patient_age');\n                                });\n                                refresh_field('custom_queue_pooling');\n                                refresh_field('appointment');\n                                refresh_field('patient');\n                                refresh_field('appointment_type');\n                            });\n                            d.dialog.hide();\n                        }\n                    });\n                    return d;\n                }\n            );\n\t\t}\n\t}\n});",
  "view": "Form"
 }
]