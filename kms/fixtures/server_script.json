[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2024-05-21 13:26:51.186374",
  "module": "KMS",
  "name": "Set Cancelled on Open Appointments",
  "reference_doctype": null,
  "script": "appointment = frappe.db.get_list('Patient Appointment', filters={'status': 'Open'}, fields=['name', 'appointment_date'])\nfor q in appointment:\n    if q['appointment_date']<frappe.utils.today():\n        doc = frappe.get_doc('Patient Appointment', q['name'])\n        doc.status = 'Cancelled'\n        doc.save()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-05-24 02:04:11.625024",
  "module": "KMS",
  "name": "Insert Vital Signs after saving Patient Appointment",
  "reference_doctype": "Patient Appointment",
  "script": "if doc.appointment_date == frappe.utils.nowdate() and doc.status == 'Checked In':\n    if frappe.db.exists(\"Dispatcher Settings\", {\"branch\": doc.custom_branch, 'enable_date': doc.appointment_date}) and doc.appointment_type == 'MCU':\n        disp_doc = frappe.get_doc({\n            'doctype': 'Dispatcher',\n            'patient_appointment': doc.name,\n            'status': 'In Queue'\n        })\n        for entry in doc.custom_mcu_exam_items:\n            new_entry = entry.as_dict()\n            new_entry.name = None\n            disp_doc.append('package', new_entry)\n        values = {'appt': doc.name, 'branch': doc.custom_branch}\n        rooms = frappe.db.sql(\"\"\"select distinct tigsu.service_unit from `tabMCU Appointment` tma, tabItem ti, `tabItem Group Service Unit` tigsu\n            where tma.parent = %(appt)s\n            and tma.parenttype = 'Patient Appointment'\n            and ti.name = tma.examination_item\n            and ti.item_group = tigsu.parent\n            and tigsu.branch = %(branch)s\n            and tigsu.parenttype = 'Item Group'\"\"\", values=values, as_dict=1)\n        for room in rooms:\n            new_entry = dict()\n            new_entry['name'] = None\n            new_entry['healthcare_service_unit'] = room.service_unit\n            new_entry['status'] = 'Wait for Room Assignment'\n            disp_doc.append('assignment_table', new_entry)\n        disp_doc.save()\n    else:\n        frappe.get_doc(dict(\n            doctype = 'Vital Signs',\n            patient = doc.patient,\n            signs_date = frappe.utils.nowdate(),\n            signs_time = frappe.utils.nowtime(),\n            appointment = doc.name,\n            custom_branch = frappe.db.get_value('Healthcare Service Unit', doc.service_unit, 'custom_branch'),\n            vital_signs_note = doc.notes)).insert();",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-01-14 13:27:28.728762",
  "module": "KMS",
  "name": "Set Branch in Healthcare Service Unit",
  "reference_doctype": "Healthcare Service Unit",
  "script": "if doc.is_group == 1 and doc.parent_healthcare_service_unit:\n    doc.custom_branch = frappe.db.get_value('Healthcare Service Unit', doc.parent_healthcare_service_unit, 'custom_branch')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-01-23 11:54:42.383362",
  "module": "KMS",
  "name": "Insert Queue Pooling after Vital Sign Submit",
  "reference_doctype": "Vital Signs",
  "script": "if doc.signs_date == frappe.utils.nowdate():\n    frappe.get_doc(dict(\n        doctype = 'Queue Pooling',\n        vital_sign = doc.name,\n        patient = doc.patient,\n        date = frappe.utils.nowdate(),\n        status = 'Queued',\n        appointment = doc.appointment,\n        company = doc.company,\n        branch = doc.custom_branch,\n        service_unit = frappe.db.get_value('Patient Appoinment', doc.appointment, 'service_unit'),\n        note = doc.vital_signs_note)).insert();",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2024-02-09 15:08:44.357982",
  "module": "KMS",
  "name": "Set Queue Pooling Status after Saving Encounter",
  "reference_doctype": "Patient Encounter",
  "script": "if doc.custom_queue_pooling:\n    qp = frappe.get_doc(\"Queue Pooling\", doc.custom_queue_pooling)\n    qp.status = \"Ongoing\"\n    qp.dequeue_time = frappe.utils.nowtime()\n    qp.encounter = doc.name\n    qp.healthcare_practitioner = doc.practitioner\n    qp.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Delete",
  "event_frequency": "All",
  "modified": "2024-02-09 07:12:24.007785",
  "module": "KMS",
  "name": "Unlink Queue Pooling before Delete",
  "reference_doctype": "Patient Encounter",
  "script": "if doc.custom_queue_pooling:\n    qp = frappe.get_doc(\"Queue Pooling\", doc.custom_queue_pooling)\n    qp.status = \"Queued\"\n    qp.dequeue_time = None\n    qp.encounter = None\n    qp.healthcare_practitioner = None\n    qp.save()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-03-18 14:19:57.946544",
  "module": "KMS",
  "name": "Warn after save Lab Test Outside of Normal Value",
  "reference_doctype": "Normal Test Result",
  "script": "if doc.result_value > doc.custom_max_value or doc.result_value < doc.custom_min_value:\n    frappe.msgprint(\n        msg=\"Result {doc.lab_test_event}: {doc.result_value} is out of normal value.\",\n        title=\"Warning\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2024-03-24 22:47:07.884336",
  "module": "KMS",
  "name": "Customer name",
  "reference_doctype": "Customer",
  "script": "if doc.customer_type not in doc.customer_name and (doc.customer_type == 'PT' or doc.customer_type == 'PT'):\n    doc.customer_name = doc.customer_type + ' ' + doc.customer_name\n    doc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2024-05-27 21:35:25.768870",
  "module": "KMS",
  "name": "Update HPP on Insert",
  "reference_doctype": "Item Price",
  "script": "if doc.price_list == \"Standard Buying\":\n    custom_hpp_price_list = frappe.db.get_single_value(\"Selling Settings\", \"custom_hpp_price_list\")\n    custom_cogs_multiplying_factor = frappe.db.get_value(\"Item\", doc.item_code, \"custom_cogs_multiplying_factor\", cache=True) or 1\n    custom_cogs_price_list_rate = doc.price_list_rate * custom_cogs_multiplying_factor\n    sales_item_price_name = frappe.db.get_value(\"Item Price\", {\"item_code\": doc.item_code, \"price_list\": custom_hpp_price_list}, \"name\")\n    \n    #Update HPP Price List\n    if sales_item_price_name:\n        sales_item_price_doc = frappe.get_doc(\"Item Price\", sales_item_price_name)\n        if sales_item_price_doc.price_list_rate < custom_cogs_price_list_rate:\n            sales_item_price_doc.price_list_rate = custom_cogs_price_list_rate\n            sales_item_price_doc.save()\n            frappe.msgprint(_(f\"Item Price updated for {doc.item_code} in Price List {custom_hpp_price_list}\"), alert=True)\n    else:\n        sales_item_price = frappe.get_doc({\n    \t\t\"doctype\": \"Item Price\",\n    \t\t\"price_list\": custom_hpp_price_list,\n    \t\t\"item_code\": doc.item_code,\n    \t\t\"currency\": doc.currency,\n    \t\t\"price_list_rate\": custom_cogs_price_list_rate,\n    \t\t\"uom\": doc.stock_uom})\n        sales_item_price.insert()\n        frappe.msgprint(_(f\"Item Price added for {doc.item_code} in Price List {custom_hpp_price_list}\"), alert=True)\n    \n    #Update exam items related to this raw material in its HPP price list\n    values = {'item_code': doc.item_code}\n    sales_items = frappe.db.sql(\"\"\"select\n    \t\t\t\t\t\t\t\t\tsum(tcpi.qty*tip.price_list_rate) harga, tltt.item item\n    \t\t\t\t\t\t\t\tfrom\n    \t\t\t\t\t\t\t\t\t`tabClinical Procedure Item` tcpi,\n    \t\t\t\t\t\t\t\t\t`tabLab Test Template` tltt,\n    \t\t\t\t\t\t\t\t\t`tabItem Price` tip\n    \t\t\t\t\t\t\t\twhere\n    \t\t\t\t\t\t\t\t\ttltt.name in (select parent from `tabClinical Procedure Item` tcpi where tcpi.item_code = %(item_code)s and parenttype = 'Lab Test Template')\n    \t\t\t\t\t\t\t\t\tand tcpi.parenttype = 'Lab Test Template'\n    \t\t\t\t\t\t\t\t\tand tip.price_list = (select value from tabSingles ts WHERE ts.doctype = 'Selling Settings' and field = 'custom_hpp_price_list')\n    \t\t\t\t\t\t\t\t\tand tip.item_code = tcpi.item_code\n    \t\t\t\t\t\t\t\t\tand tltt.name = tcpi.parent\n    \t\t\t\t\t\t\t\tgroup by 2\"\"\", values=values, as_dict=1)\n    for sales_item in sales_items:\n        exam_item_price_name = frappe.db.get_value(\"Item Price\", {\"item_code\": sales_item.item, \"price_list\": custom_hpp_price_list}, \"name\")\n        if exam_item_price_name:\n            exam_item_price_doc = frappe.get_doc(\"Item Price\", exam_item_price_name)\n            if exam_item_price_doc.price_list_rate < sales_item.harga:\n                exam_item_price_doc.price_list_rate = sales_item.harga\n                exam_item_price_doc.save()\n                frappe.msgprint(_(f\"Item Price updated for {sales_item.item} in Price List {custom_hpp_price_list}\"), alert=True)\n        else:\n            exam_item_price = frappe.get_doc({\n                \"doctype\": \"Item Price\", \n                \"price_list\": custom_hpp_price_list, \n                \"item_code\": sales_item.item, \n                \"currency\": doc.currency, \n                \"price_list_rate\": sales_item.harga, \n                \"uom\": \"Unit\"})\n            exam_item_price.insert()\n            frappe.msgprint(_(f\"Item Price added for {item.item} in Price List {custom_hpp_price_list}\"), alert=True)\n        #update related product bundle to this exam item\n        values = {'item_code': sales_item.item}\n        pb_items = frappe.db.sql(\"\"\"SELECT item_code, rate, parent FROM `tabProduct Bundle Item` tpbi WHERE tpbi.item_code = %(item_code)s\"\"\", values=values, as_dict=True)\n        for pb_item in pb_items:\n            pb_doc = frappe.get_doc('Product Bundle', pb_item.parent)\n            total_rate = 0\n            for pb_doc_item in pb_doc.items:\n                if pb_doc_item.item_code == sales_item.item:\n                    total_rate = total_rate + sales_item.harga\n                    if pb_doc_item.rate < sales_item.harga:\n                        pb_doc_item.rate = sales_item.harga\n                else:\n                    total_rate = total_rate + pb_doc_item.rate\n            pb_doc.custom_rate = total_rate + (total_rate * pb_doc.custom_margin / 100)\n            pb_doc.save()\n            #get hpp price list for product Bundle\n            pb_price_name = frappe.db.get_value(\"Item Price\", {\"item_code\": pb_doc.name, \"price_list\": custom_hpp_price_list}, \"name\")\n            if pb_price_name:\n                pb_price_doc = frappe.get_doc(\"Item Price\", pb_price_name)\n                if pb_price_doc.price_list_rate < total_rate:\n                    pb_price_doc.price_list_rate = total_rate\n                    pb_price_doc.save()\n                    frappe.msgprint(_(f\"Item Price updated for {pb_doc.name} in Price List {custom_hpp_price_list}\"), alert=True)\n            else:\n                pb_price_doc = frappe.get_doc({\n                    \"doctype\": \"Item Price\", \n                    \"price_list\": custom_hpp_price_list, \n                    \"item_code\": pb_doc.name, \n                    \"currency\": doc.currency, \n                    \"price_list_rate\": total_rate, \n                    \"uom\": \"Unit\"})\n                pb_price_doc.insert()\n                frappe.msgprint(_(f\"Item Price added for {pb_doc.name} in Price List {custom_hpp_price_list}\"), alert=True)                \n            pb_selling_price_name = frappe.db.get_value(\"Item Price\", {\"item_code\": pb_doc.name, \"price_list\": sales_item_price_name}, \"name\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-05-28 09:29:02.225002",
  "module": "KMS",
  "name": "Quotation",
  "reference_doctype": "Quotation",
  "script": "if doc.amended_from:\n    for item in doc.items:\n        rate = frappe.db.get_value('Product Bundle', item.item_code, 'custom_rate')\n        item.rate = rate\n        item.amount = item.qty * rate",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2024-01-28 16:27:26.723966",
  "module": "KMS",
  "name": "Timeout Queue Pooling",
  "reference_doctype": null,
  "script": "queue_pooling = frappe.db.get_list('Queue Pooling', filters={'status': 'Queued'}, fields=['name', 'date'])\nfor q in queue_pooling:\n    if q['date']!=frappe.utils.today():\n        doc = frappe.get_doc('Queue Pooling', q['name'])\n        doc.status = 'Cancelled'\n        doc.cancel_reason = 'Timeout'\n        doc.save()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2024-01-29 17:43:45.287927",
  "module": "KMS",
  "name": "Set No Show",
  "reference_doctype": null,
  "script": "queue_pooling = frappe.db.get_list('Queue Pooling', filters={'status': 'Scheduled'}, fields=['name', 'date'])\nfor q in queue_pooling:\n    if q['date']<frappe.utils.today():\n        doc = frappe.get_doc('Queue Pooling', q['name'])\n        doc.status = 'No Show'\n        doc.save()",
  "script_type": "Scheduler Event"
 }
]